"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setBackgroundColor = exports.set3dBuildingColor = exports.loadCustomMapStyle = exports.mapStyleChange = exports.loadMapStyleErr = exports.loadMapStyles = exports.requestMapStyles = exports.mapConfigChange = exports.inputMapStyle = exports.addCustomMapStyle = void 0;

var _toolkit = require("@reduxjs/toolkit");

var _actionTypes = _interopRequireDefault(require("./action-types"));

// Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/**
 * Add map style from user input to reducer and set it to current style
 * This action is called when user click confirm after putting in a valid style url in the custom map style dialog.
 * It should not be called from outside kepler.gl without a valid `inputStyle` in the `mapStyle` reducer.
 * param {void}
 * @memberof mapStyleActions
 * @public
 */
var addCustomMapStyle = (0, _toolkit.createAction)(_actionTypes["default"].ADD_CUSTOM_MAP_STYLE);
/** INPUT_MAP_STYLE */

exports.addCustomMapStyle = addCustomMapStyle;

/**
 * Input a custom map style object
 * @memberof mapStyleActions
 * @param inputStyle
 * @param inputStyle.url - style url e.g. `'mapbox://styles/heshan/xxxxxyyyyzzz'`
 * @param inputStyle.id - style id e.g. `'custom_style_1'`
 * @param inputStyle.style - actual mapbox style json
 * @param inputStyle.label - style name
 * @param inputStyle.accessToken - mapbox access token
 * @param inputStyle.icon - icon image data url
 * @param [mapState] - mapState is optional
 * @public
 */
var inputMapStyle = (0, _toolkit.createAction)(_actionTypes["default"].INPUT_MAP_STYLE, function (inputStyle, mapState) {
  return {
    payload: {
      inputStyle: inputStyle,
      mapState: mapState
    }
  };
});
/** MAP_CONFIG_CHANGE */

exports.inputMapStyle = inputMapStyle;

/**
 * Update `visibleLayerGroups`to change layer group visibility
 * @memberof mapStyleActions
 * @param mapStyle new config `{visibleLayerGroups: {label: false, road: true, background: true}}`
 * @public
 */
var mapConfigChange = (0, _toolkit.createAction)(_actionTypes["default"].MAP_CONFIG_CHANGE, function (mapStyle) {
  return {
    payload: mapStyle
  };
});
exports.mapConfigChange = mapConfigChange;

/**
 * Request map style style object based on style.url.
 * @memberof mapStyleActions
 * @public
 */
var requestMapStyles = (0, _toolkit.createAction)(_actionTypes["default"].REQUEST_MAP_STYLES, function (mapStyles, onSuccess) {
  return {
    payload: {
      mapStyles: mapStyles,
      onSuccess: onSuccess
    }
  };
});
/** LOAD_MAP_STYLES */

exports.requestMapStyles = requestMapStyles;

/**
 * Callback when load map style success
 * @memberof mapStyleActions
 * @param newStyles a `{[id]: style}` mapping
 * @public
 */
var loadMapStyles = (0, _toolkit.createAction)(_actionTypes["default"].LOAD_MAP_STYLES, function (newStyles, onSuccess) {
  return {
    payload: {
      newStyles: newStyles,
      onSuccess: onSuccess
    }
  };
});
/** LOAD_MAP_STYLE_ERR */

exports.loadMapStyles = loadMapStyles;

/**
 * Callback when load map style error
 * @memberof mapStyleActions
 * @param ids
 * @param error
 * @public
 */
var loadMapStyleErr = (0, _toolkit.createAction)(_actionTypes["default"].LOAD_MAP_STYLE_ERR, function (ids, error) {
  return {
    payload: {
      ids: ids,
      error: error
    }
  };
});
/** MAP_STYLE_CHANGE */

exports.loadMapStyleErr = loadMapStyleErr;

/**
 * Change to another map style. The selected style should already been loaded into `mapStyle.mapStyles`
 * @memberof mapStyleActions
 * @param styleType the style to change to
 * @param onSuccess optional success callback function when an asynchronous basemap syle has loaded
 * @public
 */
var mapStyleChange = (0, _toolkit.createAction)(_actionTypes["default"].MAP_STYLE_CHANGE, function (styleType, onSuccess) {
  return {
    payload: {
      styleType: styleType,
      onSuccess: onSuccess
    }
  };
});
/** LOAD_CUSTOM_MAP_STYLE */

exports.mapStyleChange = mapStyleChange;

/**
 * Callback when a custom map style object is received
 * @memberof mapStyleActions
 * @param customMapStyle
 * @param customMapStyle.icon
 * @param customMapStyle.style
 * @param customMapStyle.error
 * @public
 */
var loadCustomMapStyle = (0, _toolkit.createAction)(_actionTypes["default"].LOAD_CUSTOM_MAP_STYLE, function (customMapStyle) {
  return {
    payload: customMapStyle
  };
});
/** SET_3D_BUILDING_COLOR */

exports.loadCustomMapStyle = loadCustomMapStyle;
// SET_3D_BUILDING_COLOR

/**
 * Set 3d building layer group color
 * @memberof mapStyleActions
 * @param color - [r, g, b]
 * @public
 */
var set3dBuildingColor = (0, _toolkit.createAction)(_actionTypes["default"].SET_3D_BUILDING_COLOR, function (color) {
  return {
    payload: color
  };
});
/** SET_BACKGROUND_COLOR */

exports.set3dBuildingColor = set3dBuildingColor;

/**
 * Set background color
 * @memberof mapStyleActions
 * @param color - [r, g, b]
 * @public
 */
var setBackgroundColor = (0, _toolkit.createAction)(_actionTypes["default"].SET_BACKGROUND_COLOR, function (color) {
  return {
    payload: color
  };
});
/**
 * Actions handled mostly by  `mapStyle` reducer.
 * They manage the display of base map, such as loading and receiving base map styles,
 * hiding and showing map layers, user input of custom map style url.
 *
 * @public
 */

/* eslint-disable no-unused-vars */
// @ts-ignore

exports.setBackgroundColor = setBackgroundColor;
var mapStyleActions = null;
/* eslint-enable no-unused-vars */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,