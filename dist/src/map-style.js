"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.mapStyleReducerFactory = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var _actions = require("@kepler.gl/actions");

var mapStyleUpdaters = _interopRequireWildcard(require("./map-style-updaters"));

var _actionHandler;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Important: Do not rename `actionHandler` or the assignment pattern of property value.
 * It is used to generate documentation
 */
var actionHandler = (_actionHandler = {}, (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.INIT, mapStyleUpdaters.initMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.INPUT_MAP_STYLE, mapStyleUpdaters.inputMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.MAP_CONFIG_CHANGE, mapStyleUpdaters.mapConfigChangeUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.MAP_STYLE_CHANGE, mapStyleUpdaters.mapStyleChangeUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.REQUEST_MAP_STYLES, mapStyleUpdaters.requestMapStylesUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.LOAD_MAP_STYLES, mapStyleUpdaters.loadMapStylesUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.LOAD_MAP_STYLE_ERR, mapStyleUpdaters.loadMapStyleErrUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.RECEIVE_MAP_CONFIG, mapStyleUpdaters.receiveMapConfigUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.LOAD_CUSTOM_MAP_STYLE, mapStyleUpdaters.loadCustomMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.ADD_CUSTOM_MAP_STYLE, mapStyleUpdaters.addCustomMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.RESET_MAP_CONFIG, mapStyleUpdaters.resetMapConfigMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.SET_3D_BUILDING_COLOR, mapStyleUpdaters.set3dBuildingColorUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.SET_BACKGROUND_COLOR, mapStyleUpdaters.setBackgroundColorUpdater), (0, _defineProperty2["default"])(_actionHandler, _actions.ActionTypes.RESET_MAP_CONFIG, mapStyleUpdaters.resetMapConfigMapStyleUpdater), _actionHandler);

var mapStyleReducerFactory = function mapStyleReducerFactory() {
  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (// @ts-expect-error
    (0, _reduxActions.handleActions)(actionHandler, _objectSpread(_objectSpread(_objectSpread({}, mapStyleUpdaters.INITIAL_MAP_STYLE), initialState), {}, {
      initialState: initialState
    }))
  );
};

exports.mapStyleReducerFactory = mapStyleReducerFactory;

var _default = mapStyleReducerFactory();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9zcmMvbWFwLXN0eWxlLnRzIl0sIm5hbWVzIjpbImFjdGlvbkhhbmRsZXIiLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJtYXBTdHlsZVVwZGF0ZXJzIiwiaW5pdE1hcFN0eWxlVXBkYXRlciIsIklOUFVUX01BUF9TVFlMRSIsImlucHV0TWFwU3R5bGVVcGRhdGVyIiwiTUFQX0NPTkZJR19DSEFOR0UiLCJtYXBDb25maWdDaGFuZ2VVcGRhdGVyIiwiTUFQX1NUWUxFX0NIQU5HRSIsIm1hcFN0eWxlQ2hhbmdlVXBkYXRlciIsIlJFUVVFU1RfTUFQX1NUWUxFUyIsInJlcXVlc3RNYXBTdHlsZXNVcGRhdGVyIiwiTE9BRF9NQVBfU1RZTEVTIiwibG9hZE1hcFN0eWxlc1VwZGF0ZXIiLCJMT0FEX01BUF9TVFlMRV9FUlIiLCJsb2FkTWFwU3R5bGVFcnJVcGRhdGVyIiwiUkVDRUlWRV9NQVBfQ09ORklHIiwicmVjZWl2ZU1hcENvbmZpZ1VwZGF0ZXIiLCJMT0FEX0NVU1RPTV9NQVBfU1RZTEUiLCJsb2FkQ3VzdG9tTWFwU3R5bGVVcGRhdGVyIiwiQUREX0NVU1RPTV9NQVBfU1RZTEUiLCJhZGRDdXN0b21NYXBTdHlsZVVwZGF0ZXIiLCJSRVNFVF9NQVBfQ09ORklHIiwicmVzZXRNYXBDb25maWdNYXBTdHlsZVVwZGF0ZXIiLCJTRVRfM0RfQlVJTERJTkdfQ09MT1IiLCJzZXQzZEJ1aWxkaW5nQ29sb3JVcGRhdGVyIiwiU0VUX0JBQ0tHUk9VTkRfQ09MT1IiLCJzZXRCYWNrZ3JvdW5kQ29sb3JVcGRhdGVyIiwibWFwU3R5bGVSZWR1Y2VyRmFjdG9yeSIsImluaXRpYWxTdGF0ZSIsIklOSVRJQUxfTUFQX1NUWUxFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTUEsYUFBYSwwRUFDaEJDLHFCQUFZQyxJQURJLEVBQ0dDLGdCQUFnQixDQUFDQyxtQkFEcEIsb0RBRWhCSCxxQkFBWUksZUFGSSxFQUVjRixnQkFBZ0IsQ0FBQ0csb0JBRi9CLG9EQUdoQkwscUJBQVlNLGlCQUhJLEVBR2dCSixnQkFBZ0IsQ0FBQ0ssc0JBSGpDLG9EQUloQlAscUJBQVlRLGdCQUpJLEVBSWVOLGdCQUFnQixDQUFDTyxxQkFKaEMsb0RBS2hCVCxxQkFBWVUsa0JBTEksRUFLaUJSLGdCQUFnQixDQUFDUyx1QkFMbEMsb0RBTWhCWCxxQkFBWVksZUFOSSxFQU1jVixnQkFBZ0IsQ0FBQ1csb0JBTi9CLG9EQU9oQmIscUJBQVljLGtCQVBJLEVBT2lCWixnQkFBZ0IsQ0FBQ2Esc0JBUGxDLG9EQVFoQmYscUJBQVlnQixrQkFSSSxFQVFpQmQsZ0JBQWdCLENBQUNlLHVCQVJsQyxvREFTaEJqQixxQkFBWWtCLHFCQVRJLEVBU29CaEIsZ0JBQWdCLENBQUNpQix5QkFUckMsb0RBVWhCbkIscUJBQVlvQixvQkFWSSxFQVVtQmxCLGdCQUFnQixDQUFDbUIsd0JBVnBDLG9EQVdoQnJCLHFCQUFZc0IsZ0JBWEksRUFXZXBCLGdCQUFnQixDQUFDcUIsNkJBWGhDLG9EQVloQnZCLHFCQUFZd0IscUJBWkksRUFZb0J0QixnQkFBZ0IsQ0FBQ3VCLHlCQVpyQyxvREFhaEJ6QixxQkFBWTBCLG9CQWJJLEVBYW1CeEIsZ0JBQWdCLENBQUN5Qix5QkFicEMsb0RBY2hCM0IscUJBQVlzQixnQkFkSSxFQWNlcEIsZ0JBQWdCLENBQUNxQiw2QkFkaEMsa0JBQW5COztBQWlCTyxJQUFNSyxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsWUFBRCx1RUFBZ0IsRUFBaEI7QUFBQSxTQUNwQztBQUNBLHFDQUFjOUIsYUFBZCxnREFDS0csZ0JBQWdCLENBQUM0QixpQkFEdEIsR0FFS0QsWUFGTDtBQUdFQSxNQUFBQSxZQUFZLEVBQVpBO0FBSEY7QUFGb0M7QUFBQSxDQUEvQjs7OztlQVFRRCxzQkFBc0IsRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7aGFuZGxlQWN0aW9uc30gZnJvbSAncmVkdXgtYWN0aW9ucyc7XG5pbXBvcnQge0FjdGlvblR5cGVzfSBmcm9tICdAa2VwbGVyLmdsL2FjdGlvbnMnO1xuaW1wb3J0ICogYXMgbWFwU3R5bGVVcGRhdGVycyBmcm9tICcuL21hcC1zdHlsZS11cGRhdGVycyc7XG5cbi8qKlxuICogSW1wb3J0YW50OiBEbyBub3QgcmVuYW1lIGBhY3Rpb25IYW5kbGVyYCBvciB0aGUgYXNzaWdubWVudCBwYXR0ZXJuIG9mIHByb3BlcnR5IHZhbHVlLlxuICogSXQgaXMgdXNlZCB0byBnZW5lcmF0ZSBkb2N1bWVudGF0aW9uXG4gKi9cbmNvbnN0IGFjdGlvbkhhbmRsZXIgPSB7XG4gIFtBY3Rpb25UeXBlcy5JTklUXTogbWFwU3R5bGVVcGRhdGVycy5pbml0TWFwU3R5bGVVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuSU5QVVRfTUFQX1NUWUxFXTogbWFwU3R5bGVVcGRhdGVycy5pbnB1dE1hcFN0eWxlVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLk1BUF9DT05GSUdfQ0hBTkdFXTogbWFwU3R5bGVVcGRhdGVycy5tYXBDb25maWdDaGFuZ2VVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuTUFQX1NUWUxFX0NIQU5HRV06IG1hcFN0eWxlVXBkYXRlcnMubWFwU3R5bGVDaGFuZ2VVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuUkVRVUVTVF9NQVBfU1RZTEVTXTogbWFwU3R5bGVVcGRhdGVycy5yZXF1ZXN0TWFwU3R5bGVzVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkxPQURfTUFQX1NUWUxFU106IG1hcFN0eWxlVXBkYXRlcnMubG9hZE1hcFN0eWxlc1VwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5MT0FEX01BUF9TVFlMRV9FUlJdOiBtYXBTdHlsZVVwZGF0ZXJzLmxvYWRNYXBTdHlsZUVyclVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5SRUNFSVZFX01BUF9DT05GSUddOiBtYXBTdHlsZVVwZGF0ZXJzLnJlY2VpdmVNYXBDb25maWdVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuTE9BRF9DVVNUT01fTUFQX1NUWUxFXTogbWFwU3R5bGVVcGRhdGVycy5sb2FkQ3VzdG9tTWFwU3R5bGVVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuQUREX0NVU1RPTV9NQVBfU1RZTEVdOiBtYXBTdHlsZVVwZGF0ZXJzLmFkZEN1c3RvbU1hcFN0eWxlVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLlJFU0VUX01BUF9DT05GSUddOiBtYXBTdHlsZVVwZGF0ZXJzLnJlc2V0TWFwQ29uZmlnTWFwU3R5bGVVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuU0VUXzNEX0JVSUxESU5HX0NPTE9SXTogbWFwU3R5bGVVcGRhdGVycy5zZXQzZEJ1aWxkaW5nQ29sb3JVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuU0VUX0JBQ0tHUk9VTkRfQ09MT1JdOiBtYXBTdHlsZVVwZGF0ZXJzLnNldEJhY2tncm91bmRDb2xvclVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5SRVNFVF9NQVBfQ09ORklHXTogbWFwU3R5bGVVcGRhdGVycy5yZXNldE1hcENvbmZpZ01hcFN0eWxlVXBkYXRlclxufTtcblxuZXhwb3J0IGNvbnN0IG1hcFN0eWxlUmVkdWNlckZhY3RvcnkgPSAoaW5pdGlhbFN0YXRlID0ge30pID0+XG4gIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgaGFuZGxlQWN0aW9ucyhhY3Rpb25IYW5kbGVyLCB7XG4gICAgLi4ubWFwU3R5bGVVcGRhdGVycy5JTklUSUFMX01BUF9TVFlMRSxcbiAgICAuLi5pbml0aWFsU3RhdGUsXG4gICAgaW5pdGlhbFN0YXRlXG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCBtYXBTdHlsZVJlZHVjZXJGYWN0b3J5KCk7XG4iXX0=