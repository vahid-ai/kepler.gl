"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _styles = require("@kepler.gl/styles");

var _timelineSlider = _interopRequireDefault(require("../timeline-slider"));

var _playbackControls = _interopRequireDefault(require("./playback-controls"));

var _floatingTimeDisplay = _interopRequireDefault(require("./floating-time-display"));

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

var SLIDER_MARGIN_PALM = 6;

var AnimationControlContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  padding: ", ";\n  position: relative;\n  margin-top: ", "px;\n\n  ", "\n"])), function (props) {
  return "".concat(props.theme.bottomInnerPdVert, "px ").concat(props.theme.bottomInnerPdSide, "px");
}, function (props) {
  return props.theme.bottomPanelGap;
}, _styles.media.portable(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["\n    border-top: 1px solid ", ";\n    border-left: 1px solid ", ";\n    padding: 12px 12px;\n    margin-top: 0;\n  "])), function (props) {
  return props.theme.panelBorderColor;
}, function (props) {
  return props.theme.panelBorderColor;
}));

var AnimationWidgetInner = _styledComponents["default"].div(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  .animation-control__time-slider {\n    display: flex;\n    align-items: center;\n    height: 32px;\n    width: 100%;\n  }\n  .playback-controls {\n    margin-left: 16px;\n  }\n\n  ", ";\n"])), _styles.media.palm(_templateObject4 || (_templateObject4 = (0, _taggedTemplateLiteral2["default"])(["\n    flex-direction: column;\n    .playback-controls {\n      margin: 0;\n    }\n    .animation-control__time-slider {\n      width: 100%;\n      position: relative;\n    }\n    .animation-control__time-domain {\n      position: absolute;\n      top: -24px;\n\n      &.domain-start {\n        left: ", "px;\n      }\n      &.domain-end {\n        right: ", "px;\n      }\n    }\n  "])), SLIDER_MARGIN_PALM, SLIDER_MARGIN_PALM));

var TIMELINE_PLAYBACK_STYLE = {
  flex: 1
};
AnimationControlFactory.deps = [_playbackControls["default"], _floatingTimeDisplay["default"], _timelineSlider["default"]];

function AnimationControlFactory(PlaybackControls, FloatingTimeDisplay, TimelineSlider) {
  var AnimationControl = function AnimationControl(_ref) {
    var className = _ref.className,
        style = _ref.style,
        isAnimatable = _ref.isAnimatable,
        isAnimating = _ref.isAnimating,
        resetAnimation = _ref.resetAnimation,
        toggleAnimation = _ref.toggleAnimation,
        updateAnimationSpeed = _ref.updateAnimationSpeed,
        setTimelineValue = _ref.setTimelineValue,
        setAnimationWindow = _ref.setAnimationWindow,
        timeline = _ref.timeline,
        _ref$showTimeline = _ref.showTimeline,
        showTimeline = _ref$showTimeline === void 0 ? true : _ref$showTimeline,
        _ref$showControls = _ref.showControls,
        showControls = _ref$showControls === void 0 ? true : _ref$showControls,
        _ref$showTimeDisplay = _ref.showTimeDisplay,
        showTimeDisplay = _ref$showTimeDisplay === void 0 ? true : _ref$showTimeDisplay;

    if (!timeline) {
      return null;
    }

    var animationWindow = timeline.animationWindow,
        value = timeline.value,
        speed = timeline.speed,
        defaultTimeFormat = timeline.defaultTimeFormat,
        timeFormat = timeline.timeFormat,
        timezone = timeline.timezone;
    return /*#__PURE__*/_react["default"].createElement(AnimationControlContainer, {
      style: style,
      className: (0, _classnames["default"])('animation-control-container', className)
    }, /*#__PURE__*/_react["default"].createElement(AnimationWidgetInner, {
      className: "animation-widget--inner"
    }, showTimeline ? /*#__PURE__*/_react["default"].createElement(TimelineSlider, {
      style: TIMELINE_PLAYBACK_STYLE,
      timeline: timeline,
      setTimelineValue: setTimelineValue
    }) : null, showControls ? /*#__PURE__*/_react["default"].createElement(PlaybackControls, {
      className: "animation-control-playpause",
      isAnimatable: isAnimatable,
      startAnimation: toggleAnimation,
      isAnimating: isAnimating,
      pauseAnimation: toggleAnimation,
      resetAnimation: resetAnimation,
      speed: speed,
      updateAnimationSpeed: updateAnimationSpeed,
      setFilterAnimationWindow: setAnimationWindow,
      animationWindow: animationWindow
    }) : null), showTimeDisplay ? /*#__PURE__*/_react["default"].createElement(FloatingTimeDisplay, {
      currentTime: value,
      defaultTimeFormat: defaultTimeFormat,
      timeFormat: timeFormat,
      timezone: timezone
    }) : null);
  };

  AnimationControl.defaultProps = {
    toggleAnimation: function toggleAnimation() {},
    updateAnimationSpeed: function updateAnimationSpeed() {}
  };
  return AnimationControl;
}

var _default = AnimationControlFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,