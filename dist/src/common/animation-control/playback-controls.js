"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _icons = require("../icons");

var _constants = require("@kepler.gl/constants");

var _animationSpeedSlider = _interopRequireDefault(require("./animation-speed-slider"));

var _windowActionControl = _interopRequireDefault(require("./window-action-control"));

var _animationWindowControl = _interopRequireDefault(require("./animation-window-control"));

var _resetControl = _interopRequireDefault(require("./reset-control"));

var _playControl = _interopRequireDefault(require("./play-control"));

var _speedControl = _interopRequireDefault(require("./speed-control"));

var _templateObject, _DEFAULT_ANIMATE_ITEM;

var DEFAULT_BUTTON_HEIGHT = '20px';

var StyledAnimationControls = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  position: relative;\n  width: ", "px;\n  &.disabled {\n    opacity: 0.4;\n    pointer-events: none;\n  }\n"])), function (props) {
  return props.width;
});

var DEFAULT_ICONS = {
  /* eslint-disable react/display-name */
  reset: function reset(_) {
    return /*#__PURE__*/_react["default"].createElement(_icons.Reset, {
      height: "18px"
    });
  },
  play: function play(_) {
    return /*#__PURE__*/_react["default"].createElement(_icons.Play, {
      height: "18px"
    });
  },
  pause: function pause(_) {
    return /*#__PURE__*/_react["default"].createElement(_icons.Pause, {
      height: "18px"
    });
  },
  "export": function _export(_) {
    return /*#__PURE__*/_react["default"].createElement(_icons.Save, {
      height: "18px"
    });
  },

  /* eslint-enable react/display-name */
  speed: _icons.Rocket,
  animationFree: _icons.FreeWindow,
  animationIncremental: _icons.AnchorWindow
};

function nop() {}

var DEFAULT_ANIMATE_ITEMS = (_DEFAULT_ANIMATE_ITEM = {}, (0, _defineProperty2["default"])(_DEFAULT_ANIMATE_ITEM, _constants.ANIMATION_WINDOW.free, {
  id: _constants.ANIMATION_WINDOW.free,
  icon: DEFAULT_ICONS.animationFree,
  tooltip: 'tooltip.animationByWindow'
}), (0, _defineProperty2["default"])(_DEFAULT_ANIMATE_ITEM, _constants.ANIMATION_WINDOW.incremental, {
  id: _constants.ANIMATION_WINDOW.incremental,
  icon: DEFAULT_ICONS.animationIncremental,
  tooltip: 'tooltip.animationByIncremental'
}), _DEFAULT_ANIMATE_ITEM);
PlaybackControlsFactory.deps = [// keeping this for backwards compatibility but we can decide to drop it later
_animationSpeedSlider["default"], _windowActionControl["default"], _animationWindowControl["default"], _resetControl["default"], _playControl["default"]];

function PlaybackControlsFactory(AnimationSpeedSlider, WindowActionControl, AnimationWindowControl, ResetControl, PlayControl) {
  var PLAYBACK_CONTROLS_DEFAULT_ACTION_COMPONENTS = [PlayControl, (0, _speedControl["default"])(AnimationSpeedSlider), ResetControl, WindowActionControl, AnimationWindowControl]; // eslint-disable-next-line complexity

  var PlaybackControls = function PlaybackControls(_ref) {
    var isAnimatable = _ref.isAnimatable,
        isAnimating = _ref.isAnimating,
        width = _ref.width,
        speed = _ref.speed,
        animationWindow = _ref.animationWindow,
        setFilterAnimationWindow = _ref.setFilterAnimationWindow,
        updateAnimationSpeed = _ref.updateAnimationSpeed,
        pauseAnimation = _ref.pauseAnimation,
        resetAnimation = _ref.resetAnimation,
        startAnimation = _ref.startAnimation,
        playbackIcons = _ref.playbackIcons,
        animationItems = _ref.animationItems,
        buttonStyle = _ref.buttonStyle,
        buttonHeight = _ref.buttonHeight,
        _ref$playbackActionIt = _ref.playbackActionItems,
        playbackActionItems = _ref$playbackActionIt === void 0 ? [] : _ref$playbackActionIt;

    var _useState = (0, _react.useState)(false),
        _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
        isSpeedControlVisible = _useState2[0],
        toggleSpeedControl = _useState2[1];

    var _useState3 = (0, _react.useState)(false),
        _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
        showAnimationWindowControl = _useState4[0],
        setShowAnimationWindowControl = _useState4[1];

    var toggleAnimationWindowControl = (0, _react.useCallback)(function () {
      setShowAnimationWindowControl(!showAnimationWindowControl);
    }, [showAnimationWindowControl, setShowAnimationWindowControl]);
    var btnStyle = buttonStyle ? (0, _defineProperty2["default"])({}, buttonStyle, true) : {};
    var hideAndShowSpeedControl = (0, _react.useCallback)(function () {
      if (!isSpeedControlVisible) {
        toggleSpeedControl(true);
      } else {
        // TODO: A HACK to allow input onblur get triggered before the input is unmounted
        // A better solution should be invested, see https://github.com/facebook/react/issues/12363
        window.setTimeout(function () {
          return toggleSpeedControl(false);
        }, 200);
      }
    }, [isSpeedControlVisible, toggleSpeedControl]);
    return /*#__PURE__*/_react["default"].createElement(StyledAnimationControls, {
      className: (0, _classnames["default"])('playback-controls', {
        disabled: !isAnimatable
      }),
      width: width
    }, playbackActionItems.map(function (ActionComponent, index) {
      return /*#__PURE__*/_react["default"].createElement(ActionComponent, {
        key: index,
        toggleAnimationWindowControl: toggleAnimationWindowControl,
        showAnimationWindowControl: showAnimationWindowControl,
        btnStyle: btnStyle,
        hideAndShowSpeedControl: hideAndShowSpeedControl,
        animationItems: animationItems,
        animationWindow: animationWindow,
        buttonHeight: buttonHeight,
        setFilterAnimationWindow: setFilterAnimationWindow,
        updateAnimationSpeed: updateAnimationSpeed,
        isAnimating: isAnimating,
        pauseAnimation: pauseAnimation,
        resetAnimation: resetAnimation,
        startAnimation: startAnimation,
        playbackIcons: playbackIcons,
        isSpeedControlVisible: isSpeedControlVisible,
        speed: speed
      });
    }));
  };

  PlaybackControls.defaultProps = {
    playbackIcons: DEFAULT_ICONS,
    animationItems: DEFAULT_ANIMATE_ITEMS,
    buttonStyle: 'secondary',
    buttonHeight: DEFAULT_BUTTON_HEIGHT,
    playbackActionItems: PLAYBACK_CONTROLS_DEFAULT_ACTION_COMPONENTS,
    animationWindow: _constants.ANIMATION_WINDOW.free,
    isAnimatable: true,
    pauseAnimation: nop,
    resetAnimation: nop,
    startAnimation: nop
  };
  return PlaybackControls;
}

var _default = PlaybackControlsFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,