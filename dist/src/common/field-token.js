"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("@kepler.gl/constants");

var _templateObject;

function FieldTokenFactory(fieldTypeDisplay, fieldColors) {
  var FieldTag = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n    background-color: rgba(", ", 0.2);\n    border-radius: 2px;\n    border: 1px solid rgb(", ");\n    color: rgb(", ");\n    display: inline-block;\n    font-size: 10px;\n    font-weight: 400;\n    padding: 0 5px;\n    text-align: center;\n    width: ", "px;\n    line-height: ", "px;\n  "])), function (props) {
    return props.color;
  }, function (props) {
    return props.color;
  }, function (props) {
    return props.color;
  }, function (props) {
    return props.theme.fieldTokenWidth;
  }, function (props) {
    return props.theme.fieldTokenHeight;
  });

  var FieldToken = function FieldToken(_ref) {
    var type = _ref.type;
    return /*#__PURE__*/_react["default"].createElement(FieldTag, {
      color: fieldTypeDisplay[type] && fieldTypeDisplay[type].color || fieldColors["default"]
    }, fieldTypeDisplay[type].label);
  };

  return FieldToken;
}

function getFieldTypes() {
  return _constants.FIELD_TYPE_DISPLAY;
}

function getFieldColors() {
  return _constants.FIELD_COLORS;
}

FieldTokenFactory.deps = [getFieldTypes, getFieldColors];
var _default = FieldTokenFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9jb21tb24vZmllbGQtdG9rZW4udHN4Il0sIm5hbWVzIjpbIkZpZWxkVG9rZW5GYWN0b3J5IiwiZmllbGRUeXBlRGlzcGxheSIsImZpZWxkQ29sb3JzIiwiRmllbGRUYWciLCJzdHlsZWQiLCJkaXYiLCJwcm9wcyIsImNvbG9yIiwidGhlbWUiLCJmaWVsZFRva2VuV2lkdGgiLCJmaWVsZFRva2VuSGVpZ2h0IiwiRmllbGRUb2tlbiIsInR5cGUiLCJsYWJlbCIsImdldEZpZWxkVHlwZXMiLCJGSUVMRF9UWVBFX0RJU1BMQVkiLCJnZXRGaWVsZENvbG9ycyIsIkZJRUxEX0NPTE9SUyIsImRlcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOzs7O0FBTUEsU0FBU0EsaUJBQVQsQ0FDRUMsZ0JBREYsRUFFRUMsV0FGRixFQUc2QjtBQUMzQixNQUFNQyxRQUFRLEdBQUdDLDZCQUFPQyxHQUFWLDBYQUNhLFVBQUFDLEtBQUs7QUFBQSxXQUFJQSxLQUFLLENBQUNDLEtBQVY7QUFBQSxHQURsQixFQUdZLFVBQUFELEtBQUs7QUFBQSxXQUFJQSxLQUFLLENBQUNDLEtBQVY7QUFBQSxHQUhqQixFQUlDLFVBQUFELEtBQUs7QUFBQSxXQUFJQSxLQUFLLENBQUNDLEtBQVY7QUFBQSxHQUpOLEVBVUgsVUFBQUQsS0FBSztBQUFBLFdBQUlBLEtBQUssQ0FBQ0UsS0FBTixDQUFZQyxlQUFoQjtBQUFBLEdBVkYsRUFXRyxVQUFBSCxLQUFLO0FBQUEsV0FBSUEsS0FBSyxDQUFDRSxLQUFOLENBQVlFLGdCQUFoQjtBQUFBLEdBWFIsQ0FBZDs7QUFjQSxNQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBYTtBQUFBLFFBQUVDLElBQUYsUUFBRUEsSUFBRjtBQUFBLHdCQUNqQixnQ0FBQyxRQUFEO0FBQ0UsTUFBQSxLQUFLLEVBQUdYLGdCQUFnQixDQUFDVyxJQUFELENBQWhCLElBQTBCWCxnQkFBZ0IsQ0FBQ1csSUFBRCxDQUFoQixDQUF1QkwsS0FBbEQsSUFBNERMLFdBQVc7QUFEaEYsT0FHR0QsZ0JBQWdCLENBQUNXLElBQUQsQ0FBaEIsQ0FBdUJDLEtBSDFCLENBRGlCO0FBQUEsR0FBbkI7O0FBT0EsU0FBT0YsVUFBUDtBQUNEOztBQUVELFNBQVNHLGFBQVQsR0FBeUI7QUFDdkIsU0FBT0MsNkJBQVA7QUFDRDs7QUFFRCxTQUFTQyxjQUFULEdBQTBCO0FBQ3hCLFNBQU9DLHVCQUFQO0FBQ0Q7O0FBQ0RqQixpQkFBaUIsQ0FBQ2tCLElBQWxCLEdBQXlCLENBQUNKLGFBQUQsRUFBZ0JFLGNBQWhCLENBQXpCO2VBQ2VoQixpQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7RklFTERfVFlQRV9ESVNQTEFZLCBGSUVMRF9DT0xPUlN9IGZyb20gJ0BrZXBsZXIuZ2wvY29uc3RhbnRzJztcblxuZXhwb3J0IHR5cGUgRmllbGRUb2tlblByb3BzID0ge1xuICB0eXBlOiBzdHJpbmc7XG59O1xuXG5mdW5jdGlvbiBGaWVsZFRva2VuRmFjdG9yeShcbiAgZmllbGRUeXBlRGlzcGxheTogUmV0dXJuVHlwZTx0eXBlb2YgZ2V0RmllbGRUeXBlcz4sXG4gIGZpZWxkQ29sb3JzOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRGaWVsZENvbG9ycz5cbik6IFJlYWN0LkZDPEZpZWxkVG9rZW5Qcm9wcz4ge1xuICBjb25zdCBGaWVsZFRhZyA9IHN0eWxlZC5kaXZgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgke3Byb3BzID0+IHByb3BzLmNvbG9yfSwgMC4yKTtcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiKCR7cHJvcHMgPT4gcHJvcHMuY29sb3J9KTtcbiAgICBjb2xvcjogcmdiKCR7cHJvcHMgPT4gcHJvcHMuY29sb3J9KTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgZm9udC1zaXplOiAxMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XG4gICAgcGFkZGluZzogMCA1cHg7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHdpZHRoOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLmZpZWxkVG9rZW5XaWR0aH1weDtcbiAgICBsaW5lLWhlaWdodDogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5maWVsZFRva2VuSGVpZ2h0fXB4O1xuICBgO1xuXG4gIGNvbnN0IEZpZWxkVG9rZW4gPSAoe3R5cGV9OiBGaWVsZFRva2VuUHJvcHMpID0+IChcbiAgICA8RmllbGRUYWdcbiAgICAgIGNvbG9yPXsoZmllbGRUeXBlRGlzcGxheVt0eXBlXSAmJiBmaWVsZFR5cGVEaXNwbGF5W3R5cGVdLmNvbG9yKSB8fCBmaWVsZENvbG9ycy5kZWZhdWx0fVxuICAgID5cbiAgICAgIHtmaWVsZFR5cGVEaXNwbGF5W3R5cGVdLmxhYmVsfVxuICAgIDwvRmllbGRUYWc+XG4gICk7XG4gIHJldHVybiBGaWVsZFRva2VuO1xufVxuXG5mdW5jdGlvbiBnZXRGaWVsZFR5cGVzKCkge1xuICByZXR1cm4gRklFTERfVFlQRV9ESVNQTEFZO1xufVxuXG5mdW5jdGlvbiBnZXRGaWVsZENvbG9ycygpIHtcbiAgcmV0dXJuIEZJRUxEX0NPTE9SUztcbn1cbkZpZWxkVG9rZW5GYWN0b3J5LmRlcHMgPSBbZ2V0RmllbGRUeXBlcywgZ2V0RmllbGRDb2xvcnNdO1xuZXhwb3J0IGRlZmF1bHQgRmllbGRUb2tlbkZhY3Rvcnk7XG4iXX0=