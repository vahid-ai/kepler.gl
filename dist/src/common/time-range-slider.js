"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = TimeRangeSliderFactory;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash.throttle"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _rangeSlider = _interopRequireDefault(require("./range-slider"));

var _timeSliderMarker = _interopRequireDefault(require("./time-slider-marker"));

var _playbackControls = _interopRequireDefault(require("./animation-control/playback-controls"));

var _timeRangeSliderTimeTitle = _interopRequireDefault(require("./time-range-slider-time-title"));

var _animationControl = _interopRequireDefault(require("./animation-control/animation-control"));

var _templateObject;

var animationControlWidth = 176;

var StyledSliderContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  align-items: flex-end;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding-left: ", "px;\n\n  .timeline-container .kg-slider {\n    display: none;\n  }\n\n  .playback-controls {\n    margin-left: 22px;\n  }\n"])), function (props) {
  return props.isEnlarged ? 24 : 0;
});

var ANIMATION_CONTROL_STYLE = {
  flex: 1
};
TimeRangeSliderFactory.deps = [_playbackControls["default"], _rangeSlider["default"], _timeSliderMarker["default"], _timeRangeSliderTimeTitle["default"], _animationControl["default"]];

function TimeRangeSliderFactory(PlaybackControls, RangeSlider, TimeSliderMarker, TimeRangeSliderTimeTitle, AnimationControl) {
  var TimeRangeSlider = function TimeRangeSlider(props) {
    var domain = props.domain,
        value = props.value,
        isEnlarged = props.isEnlarged,
        isMinified = props.isMinified,
        hideTimeTitle = props.hideTimeTitle,
        isAnimating = props.isAnimating,
        resetAnimation = props.resetAnimation,
        timeFormat = props.timeFormat,
        timezone = props.timezone,
        histogram = props.histogram,
        plotType = props.plotType,
        lineChart = props.lineChart,
        step = props.step,
        isAnimatable = props.isAnimatable,
        speed = props.speed,
        animationWindow = props.animationWindow,
        updateAnimationSpeed = props.updateAnimationSpeed,
        setFilterAnimationWindow = props.setFilterAnimationWindow,
        toggleAnimation = props.toggleAnimation,
        onChange = props.onChange,
        timeline = props.timeline;
    var throttledOnchange = (0, _react.useMemo)(function () {
      return (0, _lodash["default"])(onChange, 20);
    }, [onChange]);
    var style = (0, _react.useMemo)(function () {
      return {
        width: isEnlarged ? "calc(100% - ".concat(animationControlWidth, "px)") : '100%'
      };
    }, [isEnlarged]);
    return /*#__PURE__*/_react["default"].createElement("div", {
      className: "time-range-slider"
    }, !hideTimeTitle && isEnlarged ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "time-range-slider__title",
      style: style
    }, /*#__PURE__*/_react["default"].createElement(TimeRangeSliderTimeTitle, {
      timeFormat: timeFormat,
      timezone: timezone,
      value: value,
      isEnlarged: isEnlarged
    })) : null, /*#__PURE__*/_react["default"].createElement(StyledSliderContainer, {
      className: "time-range-slider__container",
      isEnlarged: isEnlarged
    }, !isMinified ? /*#__PURE__*/_react["default"].createElement("div", {
      className: "timeline-container",
      style: style
    }, /*#__PURE__*/_react["default"].createElement(RangeSlider, {
      range: domain,
      value0: value[0],
      value1: value[1],
      histogram: histogram,
      lineChart: lineChart,
      plotType: plotType,
      isEnlarged: isEnlarged,
      showInput: false,
      step: step,
      onChange: throttledOnchange,
      xAxis: TimeSliderMarker,
      timezone: timezone,
      timeFormat: timeFormat
    })) : /*#__PURE__*/_react["default"].createElement(AnimationControl, {
      style: ANIMATION_CONTROL_STYLE,
      isAnimatable: isAnimatable,
      isAnimating: isAnimating,
      resetAnimation: resetAnimation,
      toggleAnimation: toggleAnimation,
      updateAnimationSpeed: updateAnimationSpeed,
      setTimelineValue: throttledOnchange,
      setAnimationWindow: setFilterAnimationWindow,
      showTimeDisplay: false,
      timeline: timeline
    }), isEnlarged && !isMinified ? /*#__PURE__*/_react["default"].createElement(PlaybackControls, {
      isAnimatable: isAnimatable,
      width: animationControlWidth,
      speed: speed,
      animationWindow: animationWindow,
      updateAnimationSpeed: updateAnimationSpeed,
      setFilterAnimationWindow: setFilterAnimationWindow,
      pauseAnimation: toggleAnimation,
      resetAnimation: resetAnimation,
      isAnimating: isAnimating,
      startAnimation: toggleAnimation
    }) : null));
  };

  return /*#__PURE__*/_react["default"].memo(TimeRangeSlider);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,