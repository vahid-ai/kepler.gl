"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findFieldsToShow = findFieldsToShow;
exports.getTooltipDisplayDeltaValue = getTooltipDisplayDeltaValue;
exports.getTooltipDisplayValue = getTooltipDisplayValue;
exports.BRUSH_CONFIG = exports.NEGATIVE_SIGNS = exports.TOOLTIP_MINUS_SIGN = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

// Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/**
 * Minus sign used in tooltip formatting.
 * \u2212 or \u002D is the minus sign that d3-format uses for decimal number formatting
 * d3-format 2.0 uses \u002D
 */
var TOOLTIP_MINUS_SIGN = "\u2212"; // both are posible negative signs

exports.TOOLTIP_MINUS_SIGN = TOOLTIP_MINUS_SIGN;
var NEGATIVE_SIGNS = ["-", "\u2212"];
exports.NEGATIVE_SIGNS = NEGATIVE_SIGNS;
var BRUSH_CONFIG = {
  range: [0, 50]
};
exports.BRUSH_CONFIG = BRUSH_CONFIG;

function findFieldsToShow(_ref) {
  var fields = _ref.fields,
      id = _ref.id,
      maxDefaultTooltips = _ref.maxDefaultTooltips;

  // first find default tooltip fields for trips
  var fieldsToShow = _constants.DEFAULT_TOOLTIP_FIELDS.reduce(function (prev, curr) {
    if (fields.find(function (_ref2) {
      var name = _ref2.name;
      return curr.name === name;
    })) {
      // @ts-ignore
      prev.push(curr);
    }

    return prev;
  }, []);

  return (0, _defineProperty2["default"])({}, id, fieldsToShow.length ? fieldsToShow : autoFindTooltipFields(fields, maxDefaultTooltips));
}

function autoFindTooltipFields(fields, maxDefaultTooltips) {
  var ptFields = _mergeFieldPairs(_constants.TRIP_POINT_FIELDS); // filter out the default fields that contains lat and lng and any geometry


  var fieldsToShow = fields.filter(function (_ref4) {
    var name = _ref4.name,
        type = _ref4.type;
    return name.replace(/[_,.]+/g, ' ').trim().split(' ').every(function (seg) {
      return !ptFields.includes(seg);
    }) && type !== _constants.ALL_FIELD_TYPES.geojson && type !== 'object';
  });
  return fieldsToShow.slice(0, maxDefaultTooltips).map(function (_ref5) {
    var name = _ref5.name;
    return {
      name: name,
      format: null
    };
  });
}

function _mergeFieldPairs(pairs) {
  return pairs.reduce(function (prev, pair) {
    return [].concat((0, _toConsumableArray2["default"])(prev), (0, _toConsumableArray2["default"])(pair));
  }, []);
}

function getTooltipDisplayDeltaValue(_ref6) {
  var primaryData = _ref6.primaryData,
      field = _ref6.field,
      compareType = _ref6.compareType,
      data = _ref6.data,
      fieldIdx = _ref6.fieldIdx;
  var displayDeltaValue = null;

  if (primaryData && ( // comparison mode only works for numeric field
  field.type === _constants.ALL_FIELD_TYPES.integer || field.type === _constants.ALL_FIELD_TYPES.real)) {
    var baseDp = primaryData.valueAt(fieldIdx);
    var dp = data.valueAt(fieldIdx);

    if ((0, _utils.isNumber)(baseDp) && (0, _utils.isNumber)(dp)) {
      var deltaValue = compareType === _constants.COMPARE_TYPES.RELATIVE ? dp / baseDp - 1 : dp - baseDp;
      var deltaFormat = compareType === _constants.COMPARE_TYPES.RELATIVE ? _constants.TOOLTIP_FORMATS.DECIMAL_PERCENT_FULL_2[_constants.TOOLTIP_KEY] : field.displayFormat || _constants.TOOLTIP_FORMATS.DECIMAL_DECIMAL_FIXED_3[_constants.TOOLTIP_KEY];
      displayDeltaValue = (0, _utils.getFormatter)(deltaFormat, field)(deltaValue); // safely cast string

      displayDeltaValue = (0, _utils.defaultFormatter)(displayDeltaValue);
      var deltaFirstChar = displayDeltaValue.charAt(0);

      if (deltaFirstChar !== '+' && !NEGATIVE_SIGNS.includes(deltaFirstChar)) {
        displayDeltaValue = "+".concat(displayDeltaValue);
      }
    } else {
      displayDeltaValue = TOOLTIP_MINUS_SIGN;
    }
  }

  return displayDeltaValue;
}

function getTooltipDisplayValue(_ref7) {
  var item = _ref7.item,
      field = _ref7.field,
      value = _ref7.value;

  if (!(0, _utils.notNullorUndefined)(value)) {
    return '';
  }

  return item !== null && item !== void 0 && item.format ? (0, _utils.getFormatter)(item === null || item === void 0 ? void 0 : item.format, field)(value) : field.displayFormat ? (0, _utils.getFormatter)(field.displayFormat, field)(value) : (0, _utils.parseFieldValue)(value, field.type);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9zcmMvaW50ZXJhY3Rpb24tdXRpbHMudHMiXSwibmFtZXMiOlsiVE9PTFRJUF9NSU5VU19TSUdOIiwiTkVHQVRJVkVfU0lHTlMiLCJCUlVTSF9DT05GSUciLCJyYW5nZSIsImZpbmRGaWVsZHNUb1Nob3ciLCJmaWVsZHMiLCJpZCIsIm1heERlZmF1bHRUb29sdGlwcyIsImZpZWxkc1RvU2hvdyIsIkRFRkFVTFRfVE9PTFRJUF9GSUVMRFMiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyciIsImZpbmQiLCJuYW1lIiwicHVzaCIsImxlbmd0aCIsImF1dG9GaW5kVG9vbHRpcEZpZWxkcyIsInB0RmllbGRzIiwiX21lcmdlRmllbGRQYWlycyIsIlRSSVBfUE9JTlRfRklFTERTIiwiZmlsdGVyIiwidHlwZSIsInJlcGxhY2UiLCJ0cmltIiwic3BsaXQiLCJldmVyeSIsInNlZyIsImluY2x1ZGVzIiwiQUxMX0ZJRUxEX1RZUEVTIiwiZ2VvanNvbiIsInNsaWNlIiwibWFwIiwiZm9ybWF0IiwicGFpcnMiLCJwYWlyIiwiZ2V0VG9vbHRpcERpc3BsYXlEZWx0YVZhbHVlIiwicHJpbWFyeURhdGEiLCJmaWVsZCIsImNvbXBhcmVUeXBlIiwiZGF0YSIsImZpZWxkSWR4IiwiZGlzcGxheURlbHRhVmFsdWUiLCJpbnRlZ2VyIiwicmVhbCIsImJhc2VEcCIsInZhbHVlQXQiLCJkcCIsImRlbHRhVmFsdWUiLCJDT01QQVJFX1RZUEVTIiwiUkVMQVRJVkUiLCJkZWx0YUZvcm1hdCIsIlRPT0xUSVBfRk9STUFUUyIsIkRFQ0lNQUxfUEVSQ0VOVF9GVUxMXzIiLCJUT09MVElQX0tFWSIsImRpc3BsYXlGb3JtYXQiLCJERUNJTUFMX0RFQ0lNQUxfRklYRURfMyIsImRlbHRhRmlyc3RDaGFyIiwiY2hhckF0IiwiZ2V0VG9vbHRpcERpc3BsYXlWYWx1ZSIsIml0ZW0iLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7QUFVQTs7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QyxrQkFBcEI7QUFDRDtBQUNGOztBQUVELFNBQU8wQyxpQkFBUDtBQUNEOztBQUVNLFNBQVNpQixzQkFBVCxRQVFJO0FBQUEsTUFQVEMsSUFPUyxTQVBUQSxJQU9TO0FBQUEsTUFOVHRCLEtBTVMsU0FOVEEsS0FNUztBQUFBLE1BTFR1QixLQUtTLFNBTFRBLEtBS1M7O0FBQ1QsTUFBSSxDQUFDLCtCQUFtQkEsS0FBbkIsQ0FBTCxFQUFnQztBQUM5QixXQUFPLEVBQVA7QUFDRDs7QUFFRCxTQUFPRCxJQUFJLFNBQUosSUFBQUEsSUFBSSxXQUFKLElBQUFBLElBQUksQ0FBRTNCLE1BQU4sR0FDSCx5QkFBYTJCLElBQWIsYUFBYUEsSUFBYix1QkFBYUEsSUFBSSxDQUFFM0IsTUFBbkIsRUFBMkJLLEtBQTNCLEVBQWtDdUIsS0FBbEMsQ0FERyxHQUVIdkIsS0FBSyxDQUFDaUIsYUFBTixHQUNBLHlCQUFhakIsS0FBSyxDQUFDaUIsYUFBbkIsRUFBa0NqQixLQUFsQyxFQUF5Q3VCLEtBQXpDLENBREEsR0FFQSw0QkFBZ0JBLEtBQWhCLEVBQXVCdkIsS0FBSyxDQUFDaEIsSUFBN0IsQ0FKSjtBQUtEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIzIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IHtcbiAgREVGQVVMVF9UT09MVElQX0ZJRUxEUyxcbiAgQUxMX0ZJRUxEX1RZUEVTLFxuICBUUklQX1BPSU5UX0ZJRUxEUyxcbiAgVE9PTFRJUF9GT1JNQVRTLFxuICBUT09MVElQX0tFWSxcbiAgQ09NUEFSRV9UWVBFU1xufSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7RmllbGQsIFRvb2x0aXBGaWVsZCwgQ29tcGFyZVR5cGV9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuaW1wb3J0IHtcbiAgRGF0YVJvdyxcbiAgcGFyc2VGaWVsZFZhbHVlLFxuICBnZXRGb3JtYXR0ZXIsXG4gIGlzTnVtYmVyLFxuICBkZWZhdWx0Rm9ybWF0dGVyLFxuICBub3ROdWxsb3JVbmRlZmluZWRcbn0gZnJvbSAnQGtlcGxlci5nbC91dGlscyc7XG5cbi8qKlxuICogTWludXMgc2lnbiB1c2VkIGluIHRvb2x0aXAgZm9ybWF0dGluZy5cbiAqIFxcdTIyMTIgb3IgXFx1MDAyRCBpcyB0aGUgbWludXMgc2lnbiB0aGF0IGQzLWZvcm1hdCB1c2VzIGZvciBkZWNpbWFsIG51bWJlciBmb3JtYXR0aW5nXG4gKiBkMy1mb3JtYXQgMi4wIHVzZXMgXFx1MDAyRFxuICovXG5leHBvcnQgY29uc3QgVE9PTFRJUF9NSU5VU19TSUdOID0gJ1xcdTIyMTInO1xuLy8gYm90aCBhcmUgcG9zaWJsZSBuZWdhdGl2ZSBzaWduc1xuZXhwb3J0IGNvbnN0IE5FR0FUSVZFX1NJR05TID0gWydcXHUwMDJEJywgJ1xcdTIyMTInXTtcblxuZXhwb3J0IGNvbnN0IEJSVVNIX0NPTkZJRzoge1xuICByYW5nZTogW251bWJlciwgbnVtYmVyXTtcbn0gPSB7XG4gIHJhbmdlOiBbMCwgNTBdXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZEZpZWxkc1RvU2hvdyh7XG4gIGZpZWxkcyxcbiAgaWQsXG4gIG1heERlZmF1bHRUb29sdGlwc1xufToge1xuICBmaWVsZHM6IEZpZWxkW107XG4gIGlkOiBzdHJpbmc7XG4gIG1heERlZmF1bHRUb29sdGlwczogbnVtYmVyO1xufSk6IHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nW107XG59IHtcbiAgLy8gZmlyc3QgZmluZCBkZWZhdWx0IHRvb2x0aXAgZmllbGRzIGZvciB0cmlwc1xuICBjb25zdCBmaWVsZHNUb1Nob3cgPSBERUZBVUxUX1RPT0xUSVBfRklFTERTLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgIGlmIChmaWVsZHMuZmluZCgoe25hbWV9KSA9PiBjdXJyLm5hbWUgPT09IG5hbWUpKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBwcmV2LnB1c2goY3Vycik7XG4gICAgfVxuICAgIHJldHVybiBwcmV2O1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBbaWRdOiBmaWVsZHNUb1Nob3cubGVuZ3RoID8gZmllbGRzVG9TaG93IDogYXV0b0ZpbmRUb29sdGlwRmllbGRzKGZpZWxkcywgbWF4RGVmYXVsdFRvb2x0aXBzKVxuICB9O1xufVxuXG5mdW5jdGlvbiBhdXRvRmluZFRvb2x0aXBGaWVsZHMoZmllbGRzLCBtYXhEZWZhdWx0VG9vbHRpcHMpIHtcbiAgY29uc3QgcHRGaWVsZHMgPSBfbWVyZ2VGaWVsZFBhaXJzKFRSSVBfUE9JTlRfRklFTERTKTtcbiAgLy8gZmlsdGVyIG91dCB0aGUgZGVmYXVsdCBmaWVsZHMgdGhhdCBjb250YWlucyBsYXQgYW5kIGxuZyBhbmQgYW55IGdlb21ldHJ5XG4gIGNvbnN0IGZpZWxkc1RvU2hvdyA9IGZpZWxkcy5maWx0ZXIoXG4gICAgKHtuYW1lLCB0eXBlfSkgPT5cbiAgICAgIG5hbWVcbiAgICAgICAgLnJlcGxhY2UoL1tfLC5dKy9nLCAnICcpXG4gICAgICAgIC50cmltKClcbiAgICAgICAgLnNwbGl0KCcgJylcbiAgICAgICAgLmV2ZXJ5KHNlZyA9PiAhcHRGaWVsZHMuaW5jbHVkZXMoc2VnKSkgJiZcbiAgICAgIHR5cGUgIT09IEFMTF9GSUVMRF9UWVBFUy5nZW9qc29uICYmXG4gICAgICB0eXBlICE9PSAnb2JqZWN0J1xuICApO1xuXG4gIHJldHVybiBmaWVsZHNUb1Nob3cuc2xpY2UoMCwgbWF4RGVmYXVsdFRvb2x0aXBzKS5tYXAoKHtuYW1lfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lLFxuICAgICAgZm9ybWF0OiBudWxsXG4gICAgfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIF9tZXJnZUZpZWxkUGFpcnMocGFpcnMpIHtcbiAgcmV0dXJuIHBhaXJzLnJlZHVjZSgocHJldiwgcGFpcikgPT4gWy4uLnByZXYsIC4uLnBhaXJdLCBbXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb29sdGlwRGlzcGxheURlbHRhVmFsdWUoe1xuICBwcmltYXJ5RGF0YSxcbiAgZmllbGQsXG4gIGNvbXBhcmVUeXBlLFxuICBkYXRhLFxuICBmaWVsZElkeFxufToge1xuICBmaWVsZDogRmllbGQ7XG4gIGRhdGE6IERhdGFSb3c7XG4gIGZpZWxkSWR4OiBudW1iZXI7XG4gIHByaW1hcnlEYXRhOiBEYXRhUm93O1xuICBjb21wYXJlVHlwZTogQ29tcGFyZVR5cGU7XG59KTogc3RyaW5nIHwgbnVsbCB7XG4gIGxldCBkaXNwbGF5RGVsdGFWYWx1ZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5cbiAgaWYgKFxuICAgIHByaW1hcnlEYXRhICYmXG4gICAgLy8gY29tcGFyaXNvbiBtb2RlIG9ubHkgd29ya3MgZm9yIG51bWVyaWMgZmllbGRcbiAgICAoZmllbGQudHlwZSA9PT0gQUxMX0ZJRUxEX1RZUEVTLmludGVnZXIgfHwgZmllbGQudHlwZSA9PT0gQUxMX0ZJRUxEX1RZUEVTLnJlYWwpXG4gICkge1xuICAgIGNvbnN0IGJhc2VEcCA9IHByaW1hcnlEYXRhLnZhbHVlQXQoZmllbGRJZHgpO1xuICAgIGNvbnN0IGRwID0gZGF0YS52YWx1ZUF0KGZpZWxkSWR4KTtcbiAgICBpZiAoaXNOdW1iZXIoYmFzZURwKSAmJiBpc051bWJlcihkcCkpIHtcbiAgICAgIGNvbnN0IGRlbHRhVmFsdWUgPSBjb21wYXJlVHlwZSA9PT0gQ09NUEFSRV9UWVBFUy5SRUxBVElWRSA/IGRwIC8gYmFzZURwIC0gMSA6IGRwIC0gYmFzZURwO1xuICAgICAgY29uc3QgZGVsdGFGb3JtYXQgPVxuICAgICAgICBjb21wYXJlVHlwZSA9PT0gQ09NUEFSRV9UWVBFUy5SRUxBVElWRVxuICAgICAgICAgID8gVE9PTFRJUF9GT1JNQVRTLkRFQ0lNQUxfUEVSQ0VOVF9GVUxMXzJbVE9PTFRJUF9LRVldXG4gICAgICAgICAgOiBmaWVsZC5kaXNwbGF5Rm9ybWF0IHx8IFRPT0xUSVBfRk9STUFUUy5ERUNJTUFMX0RFQ0lNQUxfRklYRURfM1tUT09MVElQX0tFWV07XG5cbiAgICAgIGRpc3BsYXlEZWx0YVZhbHVlID0gZ2V0Rm9ybWF0dGVyKGRlbHRhRm9ybWF0LCBmaWVsZCkoZGVsdGFWYWx1ZSk7XG5cbiAgICAgIC8vIHNhZmVseSBjYXN0IHN0cmluZ1xuICAgICAgZGlzcGxheURlbHRhVmFsdWUgPSBkZWZhdWx0Rm9ybWF0dGVyKGRpc3BsYXlEZWx0YVZhbHVlKSBhcyBzdHJpbmc7XG4gICAgICBjb25zdCBkZWx0YUZpcnN0Q2hhciA9IGRpc3BsYXlEZWx0YVZhbHVlLmNoYXJBdCgwKTtcblxuICAgICAgaWYgKGRlbHRhRmlyc3RDaGFyICE9PSAnKycgJiYgIU5FR0FUSVZFX1NJR05TLmluY2x1ZGVzKGRlbHRhRmlyc3RDaGFyKSkge1xuICAgICAgICBkaXNwbGF5RGVsdGFWYWx1ZSA9IGArJHtkaXNwbGF5RGVsdGFWYWx1ZX1gO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwbGF5RGVsdGFWYWx1ZSA9IFRPT0xUSVBfTUlOVVNfU0lHTjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlzcGxheURlbHRhVmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUb29sdGlwRGlzcGxheVZhbHVlKHtcbiAgaXRlbSxcbiAgZmllbGQsXG4gIHZhbHVlXG59OiB7XG4gIGl0ZW06IFRvb2x0aXBGaWVsZCB8IHVuZGVmaW5lZDtcbiAgZmllbGQ6IEZpZWxkO1xuICB2YWx1ZTogYW55O1xufSk6IHN0cmluZyB7XG4gIGlmICghbm90TnVsbG9yVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiBpdGVtPy5mb3JtYXRcbiAgICA/IGdldEZvcm1hdHRlcihpdGVtPy5mb3JtYXQsIGZpZWxkKSh2YWx1ZSlcbiAgICA6IGZpZWxkLmRpc3BsYXlGb3JtYXRcbiAgICA/IGdldEZvcm1hdHRlcihmaWVsZC5kaXNwbGF5Rm9ybWF0LCBmaWVsZCkodmFsdWUpXG4gICAgOiBwYXJzZUZpZWxkVmFsdWUodmFsdWUsIGZpZWxkLnR5cGUpO1xufVxuIl19