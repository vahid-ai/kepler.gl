"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.togglePanelListView = exports.setLocale = exports.setExportHTMLMapMode = exports.setExportMapFormat = exports.setUserMapboxAccessToken = exports.setExportData = exports.setExportFiltered = exports.setExportDataType = exports.setExportSelectedDataset = exports.cleanupExportImage = exports.setExportImageError = exports.setExportImageDataUri = exports.startExportingImage = exports.setExportImageSetting = exports.removeNotification = exports.addNotification = exports.openDeleteModal = exports.setMapControlVisibility = exports.toggleMapControl = exports.toggleSidePanelCloseButton = exports.hideExportDropdown = exports.showExportDropdown = exports.toggleModal = exports.toggleSidePanel = void 0;

var _toolkit = require("@reduxjs/toolkit");

var _actionTypes = _interopRequireDefault(require("./action-types"));

// Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/**
 * Toggle active side panel
 * @memberof uiStateActions
 * @param id  id of side panel to be shown, one of `layer`, `filter`, `interaction`, `map`
 * @public
 */
var toggleSidePanel = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_SIDE_PANEL, function (id) {
  return {
    payload: id
  };
});
/** TOGGLE_MODAL */

exports.toggleSidePanel = toggleSidePanel;

/**
 * Show and hide modal dialog
 * @memberof uiStateActions
 * @param id - id of modal to be shown, null to hide modals. One of:
 *  - [`DATA_TABLE_ID`](../constants/default-settings.md#data_table_id)
 *  - [`DELETE_DATA_ID`](../constants/default-settings.md#delete_data_id)
 *  - [`ADD_DATA_ID`](../constants/default-settings.md#add_data_id)
 *  - [`EXPORT_IMAGE_ID`](../constants/default-settings.md#export_image_id)
 *  - [`EXPORT_DATA_ID`](../constants/default-settings.md#export_data_id)
 *  - [`ADD_MAP_STYLE_ID`](../constants/default-settings.md#add_map_style_id)
 * @public
 */
var toggleModal = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_MODAL, function (id) {
  return {
    payload: id
  };
});
/** SHOW_EXPORT_DROPDOWN */

exports.toggleModal = toggleModal;

/**
 * Hide and show side panel header dropdown, activated by clicking the share link on top of the side panel
 * @memberof uiStateActions
 * @param id - id of the dropdown
 * @public
 */
var showExportDropdown = (0, _toolkit.createAction)(_actionTypes["default"].SHOW_EXPORT_DROPDOWN, function (id) {
  return {
    payload: id
  };
});
/**
 * Hide side panel header dropdown, activated by clicking the share link on top of the side panel
 * @memberof uiStateActions
 * @public
 */

exports.showExportDropdown = showExportDropdown;
var hideExportDropdown = (0, _toolkit.createAction)(_actionTypes["default"].HIDE_EXPORT_DROPDOWN);
/** TOGGLE_SIDE_PANEL_CLOSE_BUTTON*/

exports.hideExportDropdown = hideExportDropdown;

/**
 * Toggle side panel close button
 * @memberof uiStateActions
 * @param show - if side panel button visible
 * @public
 */
var toggleSidePanelCloseButton = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_SIDE_PANEL_CLOSE_BUTTON, function (show) {
  return {
    payload: {
      show: show
    }
  };
});
/** TOGGLE_MAP_CONTROL */

exports.toggleSidePanelCloseButton = toggleSidePanelCloseButton;

/**
 * Toggle active map control panel
 * @memberof uiStateActions
 * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)
 * @public
 */
var toggleMapControl = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_MAP_CONTROL, function (panelId, index) {
  return {
    payload: {
      panelId: panelId,
      index: index
    }
  };
});
/** SET_MAP_CONTROL_VISIBILITY */

exports.toggleMapControl = toggleMapControl;

/**
 * Toggle active map control panel
 * @memberof uiStateActions
 * @param panelId - map control panel id, one of the keys of: [`DEFAULT_MAP_CONTROLS`](#default_map_controls)
 * @public
 */
var setMapControlVisibility = (0, _toolkit.createAction)(_actionTypes["default"].SET_MAP_CONTROL_VISIBILITY, function (panelId, show) {
  return {
    payload: {
      panelId: panelId,
      show: show
    }
  };
});
/** OPEN_DELETE_MODAL */

exports.setMapControlVisibility = setMapControlVisibility;

/**
 * Toggle active map control panel
 * @memberof uiStateActions
 * @param datasetId - `id` of the dataset to be deleted
 * @public
 */
var openDeleteModal = (0, _toolkit.createAction)(_actionTypes["default"].OPEN_DELETE_MODAL, function (datasetId) {
  return {
    payload: datasetId
  };
});
/** ADD_NOTIFICATION */

exports.openDeleteModal = openDeleteModal;

/**
 * Add a notification to be displayed.
 * Existing notification will be updated in case of matching id.
 * @memberof uiStateActions
 * @param notification - The `notification` object to be added or updated
 * @public
 */
var addNotification = (0, _toolkit.createAction)(_actionTypes["default"].ADD_NOTIFICATION, function (notification) {
  return {
    payload: notification
  };
});
/** REMOVE_NOTIFICATION */

exports.addNotification = addNotification;

/**
 * Remove a notification
 * @memberof uiStateActions
 * @param id - `id` of the notification to be removed
 * @public
 */
var removeNotification = (0, _toolkit.createAction)(_actionTypes["default"].REMOVE_NOTIFICATION, function (id) {
  return {
    payload: id
  };
});
/** SET_EXPORT_IMAGE_SETTING */

exports.removeNotification = removeNotification;

/**
 * Set `exportImage` settings: ratio, resolution, legend
 * @memberof uiStateActions
 * @param newSetting - {ratio: '1x'}
 * @public
 */
var setExportImageSetting = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_IMAGE_SETTING, function (newSetting) {
  return {
    payload: newSetting
  };
});
/**
 * Start exporting image flow
 * @memberof uiStateActions
 * @public
 */

exports.setExportImageSetting = setExportImageSetting;
var startExportingImage = (0, _toolkit.createAction)(_actionTypes["default"].START_EXPORTING_IMAGE, function (payload) {
  return {
    payload: payload
  };
});
/** SET_EXPORT_IMAGE_DATA_URI */

exports.startExportingImage = startExportingImage;

/**
 * Set `exportImage.setExportImageDataUri` to a dataUri
 * @memberof uiStateActions
 * @param dataUri - export image data uri
 * @public
 */
var setExportImageDataUri = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_IMAGE_DATA_URI, function (dataUri) {
  return {
    payload: dataUri
  };
});
/** SET_EXPORT_IMAGE_ERROR */

exports.setExportImageDataUri = setExportImageDataUri;

/**
 * Set Export image error
 * @memberof uiStateActions
 * @public
 */
var setExportImageError = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_IMAGE_ERROR, function (error) {
  return {
    payload: error
  };
});
/**
 * Delete cached export image
 * @memberof uiStateActions
 * @public
 */

exports.setExportImageError = setExportImageError;
var cleanupExportImage = (0, _toolkit.createAction)(_actionTypes["default"].CLEANUP_EXPORT_IMAGE);
/** SET_EXPORT_SELECTED_DATASET */

exports.cleanupExportImage = cleanupExportImage;

/**
 * Set selected dataset for export
 * @memberof uiStateActions
 * @param datasetId - dataset id
 * @public
 */
var setExportSelectedDataset = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_SELECTED_DATASET, function (datasetId) {
  return {
    payload: datasetId
  };
});
/** SET_EXPORT_DATA_TYPE */

exports.setExportSelectedDataset = setExportSelectedDataset;

/**
 * Set data format for exporting data
 * @memberof uiStateActions
 * @param dataType - one of `'text/csv'`
 * @public
 */
var setExportDataType = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_DATA_TYPE, function (dataType) {
  return {
    payload: dataType
  };
});
/** SET_EXPORT_FILTERED */

exports.setExportDataType = setExportDataType;

/**
 * Whether to export filtered data, `true` or `false`
 * @memberof uiStateActions
 * @param payload - set `true` to ony export filtered data
 * @public
 */
var setExportFiltered = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_FILTERED, function (payload) {
  return {
    payload: payload
  };
});
/**
 * Whether to including data in map config, toggle between `true` or `false`
 * @memberof uiStateActions
 * @public
 */

exports.setExportFiltered = setExportFiltered;
var setExportData = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_DATA);
/** SET_USER_MAPBOX_ACCESS_TOKEN */

exports.setExportData = setExportData;

/**
 * Whether we export a mapbox access token used to create a single map html file
 * @memberof uiStateActions
 * @param payload - mapbox access token
 * @public
 */
var setUserMapboxAccessToken = (0, _toolkit.createAction)(_actionTypes["default"].SET_USER_MAPBOX_ACCESS_TOKEN, function (payload) {
  return {
    payload: payload
  };
});
/** SET_EXPORT_MAP_FORMAT */

exports.setUserMapboxAccessToken = setUserMapboxAccessToken;

/**
 * Set the export map format (html, json)
 * @memberOf uiStateActions
 * @param payload - map format
 * @public
 */
var setExportMapFormat = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_MAP_FORMAT, function (payload) {
  return {
    payload: payload
  };
});
/** SET_EXPORT_MAP_HTML_MODE */

exports.setExportMapFormat = setExportMapFormat;

/**
 * Set the HTML mode to use to export HTML mode
 * @memberOf uiStateActions
 * @param payload - map mode
 */
var setExportHTMLMapMode = (0, _toolkit.createAction)(_actionTypes["default"].SET_EXPORT_MAP_HTML_MODE, function (payload) {
  return {
    payload: payload
  };
});
/** SET_LOCALE */

exports.setExportHTMLMapMode = setExportHTMLMapMode;

/**
 * Set `locale` value
 * @memberof uiStateActions
 * @param locale - locale of the UI
 * @public
 */
var setLocale = (0, _toolkit.createAction)(_actionTypes["default"].SET_LOCALE, function (locale) {
  return {
    payload: {
      locale: locale
    }
  };
});
/** TOGGLE_PANEL_LIST_VIEW */

exports.setLocale = setLocale;

/**
 * Toggle layer panel list view
 * @memberof uiStateActions
 * @param payload
 * @param payload.panelId panel id.
 * @param payload.listView layer panel listView value. Can be 'list' or 'sortByDataset'
 * @public
 */
var togglePanelListView = (0, _toolkit.createAction)(_actionTypes["default"].TOGGLE_PANEL_LIST_VIEW, function (payload) {
  return {
    payload: payload
  };
});
/**
 * This declaration is needed to group actions in docs
 */

/**
 * Actions handled mostly by  `uiState` reducer.
 * They manage UI changes in tha app, such as open and close side panel,
 * switch between tabs in the side panel, open and close modal dialog for exporting data / images etc.
 * It also manges which settings are selected during image and map export
 *
 * @public
 */

/* eslint-disable no-unused-vars */
// @ts-ignore

exports.togglePanelListView = togglePanelListView;
var uiStateActions = null;
/* eslint-enable no-unused-vars */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,