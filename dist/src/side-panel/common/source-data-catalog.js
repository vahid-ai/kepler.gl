"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledComponents2 = require("../../common/styled-components");

var _datasetTitle = _interopRequireDefault(require("./dataset-title"));

var _datasetInfo = _interopRequireDefault(require("./dataset-info"));

var _templateObject;

var SourceDataCatalogWrapper = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  transition: ", ";\n"])), function (props) {
  return props.theme.transition;
});

SourceDataCatalogFactory.deps = [_datasetTitle["default"], _datasetInfo["default"]];

function SourceDataCatalogFactory(DatasetTitle, DatasetInfo) {
  var SourceDataCatalog = function SourceDataCatalog(_ref) {
    var datasets = _ref.datasets,
        showDatasetTable = _ref.showDatasetTable,
        removeDataset = _ref.removeDataset,
        onTitleClick = _ref.onTitleClick,
        updateTableColor = _ref.updateTableColor,
        _ref$showDeleteDatase = _ref.showDeleteDataset,
        showDeleteDataset = _ref$showDeleteDatase === void 0 ? false : _ref$showDeleteDatase;
    return /*#__PURE__*/_react["default"].createElement(SourceDataCatalogWrapper, {
      className: "source-data-catalog"
    }, Object.values(datasets).map(function (dataset) {
      return /*#__PURE__*/_react["default"].createElement(_styledComponents2.SidePanelSection, {
        key: dataset.id
      }, /*#__PURE__*/_react["default"].createElement(DatasetTitle, {
        showDatasetTable: showDatasetTable,
        showDeleteDataset: showDeleteDataset,
        removeDataset: removeDataset,
        dataset: dataset,
        onTitleClick: onTitleClick,
        updateTableColor: updateTableColor
      }), showDatasetTable ? /*#__PURE__*/_react["default"].createElement(DatasetInfo, {
        dataset: dataset
      }) : null);
    }));
  };

  return SourceDataCatalog;
}

var _default = SourceDataCatalogFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9zaWRlLXBhbmVsL2NvbW1vbi9zb3VyY2UtZGF0YS1jYXRhbG9nLnRzeCJdLCJuYW1lcyI6WyJTb3VyY2VEYXRhQ2F0YWxvZ1dyYXBwZXIiLCJzdHlsZWQiLCJkaXYiLCJwcm9wcyIsInRoZW1lIiwidHJhbnNpdGlvbiIsIlNvdXJjZURhdGFDYXRhbG9nRmFjdG9yeSIsImRlcHMiLCJEYXRhc2V0VGl0bGVGYWN0b3J5IiwiRGF0YXNldEluZm9GYWN0b3J5IiwiRGF0YXNldFRpdGxlIiwiRGF0YXNldEluZm8iLCJTb3VyY2VEYXRhQ2F0YWxvZyIsImRhdGFzZXRzIiwic2hvd0RhdGFzZXRUYWJsZSIsInJlbW92ZURhdGFzZXQiLCJvblRpdGxlQ2xpY2siLCJ1cGRhdGVUYWJsZUNvbG9yIiwic2hvd0RlbGV0ZURhdGFzZXQiLCJPYmplY3QiLCJ2YWx1ZXMiLCJtYXAiLCJkYXRhc2V0IiwiaWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQU1BOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsd0JBQXdCLEdBQUdDLDZCQUFPQyxHQUFWLDhHQUNkLFVBQUFDLEtBQUs7QUFBQSxTQUFJQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUMsVUFBaEI7QUFBQSxDQURTLENBQTlCOztBQXdCQUMsd0JBQXdCLENBQUNDLElBQXpCLEdBQWdDLENBQUNDLHdCQUFELEVBQXNCQyx1QkFBdEIsQ0FBaEM7O0FBRUEsU0FBU0gsd0JBQVQsQ0FDRUksWUFERixFQUVFQyxXQUZGLEVBR0U7QUFDQSxNQUFNQyxpQkFBbUQsR0FBRyxTQUF0REEsaUJBQXNEO0FBQUEsUUFDMURDLFFBRDBELFFBQzFEQSxRQUQwRDtBQUFBLFFBRTFEQyxnQkFGMEQsUUFFMURBLGdCQUYwRDtBQUFBLFFBRzFEQyxhQUgwRCxRQUcxREEsYUFIMEQ7QUFBQSxRQUkxREMsWUFKMEQsUUFJMURBLFlBSjBEO0FBQUEsUUFLMURDLGdCQUwwRCxRQUsxREEsZ0JBTDBEO0FBQUEscUNBTTFEQyxpQkFOMEQ7QUFBQSxRQU0xREEsaUJBTjBELHNDQU10QyxLQU5zQztBQUFBLHdCQVExRCxnQ0FBQyx3QkFBRDtBQUEwQixNQUFBLFNBQVMsRUFBQztBQUFwQyxPQUNHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1AsUUFBZCxFQUF3QlEsR0FBeEIsQ0FBNEIsVUFBQUMsT0FBTztBQUFBLDBCQUNsQyxnQ0FBQyxtQ0FBRDtBQUFrQixRQUFBLEdBQUcsRUFBRUEsT0FBTyxDQUFDQztBQUEvQixzQkFDRSxnQ0FBQyxZQUFEO0FBQ0UsUUFBQSxnQkFBZ0IsRUFBRVQsZ0JBRHBCO0FBRUUsUUFBQSxpQkFBaUIsRUFBRUksaUJBRnJCO0FBR0UsUUFBQSxhQUFhLEVBQUVILGFBSGpCO0FBSUUsUUFBQSxPQUFPLEVBQUVPLE9BSlg7QUFLRSxRQUFBLFlBQVksRUFBRU4sWUFMaEI7QUFNRSxRQUFBLGdCQUFnQixFQUFFQztBQU5wQixRQURGLEVBU0dILGdCQUFnQixnQkFBRyxnQ0FBQyxXQUFEO0FBQWEsUUFBQSxPQUFPLEVBQUVRO0FBQXRCLFFBQUgsR0FBdUMsSUFUMUQsQ0FEa0M7QUFBQSxLQUFuQyxDQURILENBUjBEO0FBQUEsR0FBNUQ7O0FBeUJBLFNBQU9WLGlCQUFQO0FBQ0Q7O2VBRWNOLHdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIzIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQge29wZW5EZWxldGVNb2RhbCwgVmlzU3RhdGVBY3Rpb25zLCBBY3Rpb25IYW5kbGVyfSBmcm9tICdAa2VwbGVyLmdsL2FjdGlvbnMnO1xuaW1wb3J0IHtEYXRhQ29udGFpbmVySW50ZXJmYWNlfSBmcm9tICdAa2VwbGVyLmdsL3V0aWxzJztcbmltcG9ydCB7UkdCQ29sb3J9IGZyb20gJ0BrZXBsZXIuZ2wvdHlwZXMnO1xuXG5pbXBvcnQge1NpZGVQYW5lbFNlY3Rpb259IGZyb20gJy4uLy4uL2NvbW1vbi9zdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgRGF0YXNldFRpdGxlRmFjdG9yeSBmcm9tICcuL2RhdGFzZXQtdGl0bGUnO1xuaW1wb3J0IERhdGFzZXRJbmZvRmFjdG9yeSBmcm9tICcuL2RhdGFzZXQtaW5mbyc7XG5cbmNvbnN0IFNvdXJjZURhdGFDYXRhbG9nV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIHRyYW5zaXRpb246ICR7cHJvcHMgPT4gcHJvcHMudGhlbWUudHJhbnNpdGlvbn07XG5gO1xuXG50eXBlIE1pbmlEYXRhc2V0ID0ge1xuICBpZDogc3RyaW5nO1xuICBjb2xvcjogUkdCQ29sb3I7XG4gIGxhYmVsPzogc3RyaW5nO1xuICBkYXRhQ29udGFpbmVyOiBEYXRhQ29udGFpbmVySW50ZXJmYWNlO1xufTtcblxudHlwZSBNaW5pRGF0YXNldHMgPSB7XG4gIFtrZXk6IHN0cmluZ106IE1pbmlEYXRhc2V0O1xufTtcblxuZXhwb3J0IHR5cGUgU291cmNlRGF0YUNhdGFsb2dQcm9wcyA9IHtcbiAgZGF0YXNldHM6IE1pbmlEYXRhc2V0cztcbiAgc2hvd0RlbGV0ZURhdGFzZXQ/OiBib29sZWFuO1xuICBvblRpdGxlQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICBzaG93RGF0YXNldFRhYmxlPzogQWN0aW9uSGFuZGxlcjx0eXBlb2YgVmlzU3RhdGVBY3Rpb25zLnNob3dEYXRhc2V0VGFibGU+O1xuICB1cGRhdGVUYWJsZUNvbG9yOiBBY3Rpb25IYW5kbGVyPHR5cGVvZiBWaXNTdGF0ZUFjdGlvbnMudXBkYXRlVGFibGVDb2xvcj47XG4gIHJlbW92ZURhdGFzZXQ/OiBBY3Rpb25IYW5kbGVyPHR5cGVvZiBvcGVuRGVsZXRlTW9kYWw+O1xufTtcblxuU291cmNlRGF0YUNhdGFsb2dGYWN0b3J5LmRlcHMgPSBbRGF0YXNldFRpdGxlRmFjdG9yeSwgRGF0YXNldEluZm9GYWN0b3J5XTtcblxuZnVuY3Rpb24gU291cmNlRGF0YUNhdGFsb2dGYWN0b3J5KFxuICBEYXRhc2V0VGl0bGU6IFJldHVyblR5cGU8dHlwZW9mIERhdGFzZXRUaXRsZUZhY3Rvcnk+LFxuICBEYXRhc2V0SW5mbzogUmV0dXJuVHlwZTx0eXBlb2YgRGF0YXNldEluZm9GYWN0b3J5PlxuKSB7XG4gIGNvbnN0IFNvdXJjZURhdGFDYXRhbG9nOiBSZWFjdC5GQzxTb3VyY2VEYXRhQ2F0YWxvZ1Byb3BzPiA9ICh7XG4gICAgZGF0YXNldHMsXG4gICAgc2hvd0RhdGFzZXRUYWJsZSxcbiAgICByZW1vdmVEYXRhc2V0LFxuICAgIG9uVGl0bGVDbGljayxcbiAgICB1cGRhdGVUYWJsZUNvbG9yLFxuICAgIHNob3dEZWxldGVEYXRhc2V0ID0gZmFsc2VcbiAgfTogU291cmNlRGF0YUNhdGFsb2dQcm9wcykgPT4gKFxuICAgIDxTb3VyY2VEYXRhQ2F0YWxvZ1dyYXBwZXIgY2xhc3NOYW1lPVwic291cmNlLWRhdGEtY2F0YWxvZ1wiPlxuICAgICAge09iamVjdC52YWx1ZXMoZGF0YXNldHMpLm1hcChkYXRhc2V0ID0+IChcbiAgICAgICAgPFNpZGVQYW5lbFNlY3Rpb24ga2V5PXtkYXRhc2V0LmlkfT5cbiAgICAgICAgICA8RGF0YXNldFRpdGxlXG4gICAgICAgICAgICBzaG93RGF0YXNldFRhYmxlPXtzaG93RGF0YXNldFRhYmxlfVxuICAgICAgICAgICAgc2hvd0RlbGV0ZURhdGFzZXQ9e3Nob3dEZWxldGVEYXRhc2V0fVxuICAgICAgICAgICAgcmVtb3ZlRGF0YXNldD17cmVtb3ZlRGF0YXNldH1cbiAgICAgICAgICAgIGRhdGFzZXQ9e2RhdGFzZXR9XG4gICAgICAgICAgICBvblRpdGxlQ2xpY2s9e29uVGl0bGVDbGlja31cbiAgICAgICAgICAgIHVwZGF0ZVRhYmxlQ29sb3I9e3VwZGF0ZVRhYmxlQ29sb3J9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7c2hvd0RhdGFzZXRUYWJsZSA/IDxEYXRhc2V0SW5mbyBkYXRhc2V0PXtkYXRhc2V0fSAvPiA6IG51bGx9XG4gICAgICAgIDwvU2lkZVBhbmVsU2VjdGlvbj5cbiAgICAgICkpfVxuICAgIDwvU291cmNlRGF0YUNhdGFsb2dXcmFwcGVyPlxuICApO1xuXG4gIHJldHVybiBTb3VyY2VEYXRhQ2F0YWxvZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgU291cmNlRGF0YUNhdGFsb2dGYWN0b3J5O1xuIl19