"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _sourceDataCatalog = _interopRequireDefault(require("../common/source-data-catalog"));

var _layerList = _interopRequireDefault(require("./layer-list"));

var _templateObject;

var DatasetLayerSectionWrapper = _styledComponents["default"].div.attrs({
  className: 'dataset-layer-section'
})(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 16px;\n"])));

DatasetLayerSectionFactory.deps = [_sourceDataCatalog["default"], _layerList["default"]];

function DatasetLayerSectionFactory(SourceDataCatalog, LayerList) {
  var DatasetLayerSection = function DatasetLayerSection(props) {
    var dataset = props.dataset,
        datasets = props.datasets,
        showDatasetTable = props.showDatasetTable,
        layers = props.layers,
        updateTableColor = props.updateTableColor,
        showDeleteDataset = props.showDeleteDataset,
        removeDataset = props.removeDataset,
        layerOrder = props.layerOrder,
        layerClasses = props.layerClasses,
        uiStateActions = props.uiStateActions,
        visStateActions = props.visStateActions;
    var datasetCatalog = (0, _react.useMemo)(function () {
      return (0, _defineProperty2["default"])({}, dataset.id, dataset);
    }, [dataset]);
    return /*#__PURE__*/_react["default"].createElement(DatasetLayerSectionWrapper, null, /*#__PURE__*/_react["default"].createElement(SourceDataCatalog, {
      datasets: datasetCatalog,
      showDatasetTable: showDatasetTable,
      updateTableColor: updateTableColor,
      removeDataset: removeDataset,
      showDeleteDataset: showDeleteDataset
    }), /*#__PURE__*/_react["default"].createElement(LayerList, {
      datasets: datasets,
      layerOrder: layerOrder,
      layers: layers,
      layerClasses: layerClasses,
      uiStateActions: uiStateActions,
      visStateActions: visStateActions,
      isSortable: false
    }));
  };

  return DatasetLayerSection;
}

var _default = DatasetLayerSectionFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2RhdGFzZXQtbGF5ZXItc2VjdGlvbi50c3giXSwibmFtZXMiOlsiRGF0YXNldExheWVyU2VjdGlvbldyYXBwZXIiLCJzdHlsZWQiLCJkaXYiLCJhdHRycyIsImNsYXNzTmFtZSIsIkRhdGFzZXRMYXllclNlY3Rpb25GYWN0b3J5IiwiZGVwcyIsIlNvdXJjZURhdGFDYXRhbG9nRmFjdG9yeSIsIkxheWVyTGlzdEZhY3RvcnkiLCJTb3VyY2VEYXRhQ2F0YWxvZyIsIkxheWVyTGlzdCIsIkRhdGFzZXRMYXllclNlY3Rpb24iLCJwcm9wcyIsImRhdGFzZXQiLCJkYXRhc2V0cyIsInNob3dEYXRhc2V0VGFibGUiLCJsYXllcnMiLCJ1cGRhdGVUYWJsZUNvbG9yIiwic2hvd0RlbGV0ZURhdGFzZXQiLCJyZW1vdmVEYXRhc2V0IiwibGF5ZXJPcmRlciIsImxheWVyQ2xhc3NlcyIsInVpU3RhdGVBY3Rpb25zIiwidmlzU3RhdGVBY3Rpb25zIiwiZGF0YXNldENhdGFsb2ciLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUVBOztBQUNBOzs7O0FBbUJBLElBQU1BLDBCQUEwQixHQUFHQyw2QkFBT0MsR0FBUCxDQUFXQyxLQUFYLENBQWlCO0FBQ2xEQyxFQUFBQSxTQUFTLEVBQUU7QUFEdUMsQ0FBakIsQ0FBSCxnSEFBaEM7O0FBTUFDLDBCQUEwQixDQUFDQyxJQUEzQixHQUFrQyxDQUFDQyw2QkFBRCxFQUEyQkMscUJBQTNCLENBQWxDOztBQUVBLFNBQVNILDBCQUFULENBQ0VJLGlCQURGLEVBRUVDLFNBRkYsRUFHRTtBQUNBLE1BQU1DLG1CQUF1RCxHQUFHLFNBQTFEQSxtQkFBMEQsQ0FBQUMsS0FBSyxFQUFJO0FBQUEsUUFFckVDLE9BRnFFLEdBYW5FRCxLQWJtRSxDQUVyRUMsT0FGcUU7QUFBQSxRQUdyRUMsUUFIcUUsR0FhbkVGLEtBYm1FLENBR3JFRSxRQUhxRTtBQUFBLFFBSXJFQyxnQkFKcUUsR0FhbkVILEtBYm1FLENBSXJFRyxnQkFKcUU7QUFBQSxRQUtyRUMsTUFMcUUsR0FhbkVKLEtBYm1FLENBS3JFSSxNQUxxRTtBQUFBLFFBTXJFQyxnQkFOcUUsR0FhbkVMLEtBYm1FLENBTXJFSyxnQkFOcUU7QUFBQSxRQU9yRUMsaUJBUHFFLEdBYW5FTixLQWJtRSxDQU9yRU0saUJBUHFFO0FBQUEsUUFRckVDLGFBUnFFLEdBYW5FUCxLQWJtRSxDQVFyRU8sYUFScUU7QUFBQSxRQVNyRUMsVUFUcUUsR0FhbkVSLEtBYm1FLENBU3JFUSxVQVRxRTtBQUFBLFFBVXJFQyxZQVZxRSxHQWFuRVQsS0FibUUsQ0FVckVTLFlBVnFFO0FBQUEsUUFXckVDLGNBWHFFLEdBYW5FVixLQWJtRSxDQVdyRVUsY0FYcUU7QUFBQSxRQVlyRUMsZUFacUUsR0FhbkVYLEtBYm1FLENBWXJFVyxlQVpxRTtBQWV2RSxRQUFNQyxjQUFjLEdBQUcsb0JBQVEsWUFBTTtBQUNuQyxrREFBU1gsT0FBTyxDQUFDWSxFQUFqQixFQUFzQlosT0FBdEI7QUFDRCxLQUZzQixFQUVwQixDQUFDQSxPQUFELENBRm9CLENBQXZCO0FBSUEsd0JBQ0UsZ0NBQUMsMEJBQUQscUJBQ0UsZ0NBQUMsaUJBQUQ7QUFDRSxNQUFBLFFBQVEsRUFBRVcsY0FEWjtBQUVFLE1BQUEsZ0JBQWdCLEVBQUVULGdCQUZwQjtBQUdFLE1BQUEsZ0JBQWdCLEVBQUVFLGdCQUhwQjtBQUlFLE1BQUEsYUFBYSxFQUFFRSxhQUpqQjtBQUtFLE1BQUEsaUJBQWlCLEVBQUVEO0FBTHJCLE1BREYsZUFRRSxnQ0FBQyxTQUFEO0FBQ0UsTUFBQSxRQUFRLEVBQUVKLFFBRFo7QUFFRSxNQUFBLFVBQVUsRUFBRU0sVUFGZDtBQUdFLE1BQUEsTUFBTSxFQUFFSixNQUhWO0FBSUUsTUFBQSxZQUFZLEVBQUVLLFlBSmhCO0FBS0UsTUFBQSxjQUFjLEVBQUVDLGNBTGxCO0FBTUUsTUFBQSxlQUFlLEVBQUVDLGVBTm5CO0FBT0UsTUFBQSxVQUFVLEVBQUU7QUFQZCxNQVJGLENBREY7QUFvQkQsR0F2Q0Q7O0FBeUNBLFNBQU9aLG1CQUFQO0FBQ0Q7O2VBRWNOLDBCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIzIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IFJlYWN0LCB7dXNlTWVtb30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCBTb3VyY2VEYXRhQ2F0YWxvZ0ZhY3RvcnkgZnJvbSAnLi4vY29tbW9uL3NvdXJjZS1kYXRhLWNhdGFsb2cnO1xuaW1wb3J0IExheWVyTGlzdEZhY3RvcnkgZnJvbSAnLi9sYXllci1saXN0JztcbmltcG9ydCB7TGF5ZXIsIExheWVyQ2xhc3Nlc1R5cGV9IGZyb20gJ0BrZXBsZXIuZ2wvbGF5ZXJzJztcbmltcG9ydCB7VUlTdGF0ZUFjdGlvbnMsIEFjdGlvbkhhbmRsZXIsIFZpc1N0YXRlQWN0aW9uc30gZnJvbSAnQGtlcGxlci5nbC9hY3Rpb25zJztcbmltcG9ydCB7S2VwbGVyVGFibGUsIERhdGFzZXRzfSBmcm9tICdAa2VwbGVyLmdsL3RhYmxlJztcblxudHlwZSBEYXRhc2V0TGF5ZXJTZWN0aW9uUHJvcHMgPSB7XG4gIGRhdGFzZXRzOiBEYXRhc2V0cztcbiAgZGF0YXNldDogS2VwbGVyVGFibGU7XG4gIGxheWVyczogTGF5ZXJbXTtcbiAgbGF5ZXJPcmRlcjogbnVtYmVyW107XG4gIGxheWVyQ2xhc3NlczogTGF5ZXJDbGFzc2VzVHlwZTtcbiAgc2hvd0RlbGV0ZURhdGFzZXQ6IGJvb2xlYW47XG4gIHNob3dEYXRhc2V0VGFibGU6IEFjdGlvbkhhbmRsZXI8dHlwZW9mIFZpc1N0YXRlQWN0aW9ucy5zaG93RGF0YXNldFRhYmxlPjtcbiAgdXBkYXRlVGFibGVDb2xvcjogQWN0aW9uSGFuZGxlcjx0eXBlb2YgVmlzU3RhdGVBY3Rpb25zLnVwZGF0ZVRhYmxlQ29sb3I+O1xuICByZW1vdmVEYXRhc2V0OiBBY3Rpb25IYW5kbGVyPHR5cGVvZiBVSVN0YXRlQWN0aW9ucy5vcGVuRGVsZXRlTW9kYWw+O1xuICB1aVN0YXRlQWN0aW9uczogdHlwZW9mIFVJU3RhdGVBY3Rpb25zO1xuICB2aXNTdGF0ZUFjdGlvbnM6IHR5cGVvZiBWaXNTdGF0ZUFjdGlvbnM7XG59O1xuXG5jb25zdCBEYXRhc2V0TGF5ZXJTZWN0aW9uV3JhcHBlciA9IHN0eWxlZC5kaXYuYXR0cnMoe1xuICBjbGFzc05hbWU6ICdkYXRhc2V0LWxheWVyLXNlY3Rpb24nXG59KWBcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbkRhdGFzZXRMYXllclNlY3Rpb25GYWN0b3J5LmRlcHMgPSBbU291cmNlRGF0YUNhdGFsb2dGYWN0b3J5LCBMYXllckxpc3RGYWN0b3J5XTtcblxuZnVuY3Rpb24gRGF0YXNldExheWVyU2VjdGlvbkZhY3RvcnkoXG4gIFNvdXJjZURhdGFDYXRhbG9nOiBSZXR1cm5UeXBlPHR5cGVvZiBTb3VyY2VEYXRhQ2F0YWxvZ0ZhY3Rvcnk+LFxuICBMYXllckxpc3Q6IFJldHVyblR5cGU8dHlwZW9mIExheWVyTGlzdEZhY3Rvcnk+XG4pIHtcbiAgY29uc3QgRGF0YXNldExheWVyU2VjdGlvbjogUmVhY3QuRkM8RGF0YXNldExheWVyU2VjdGlvblByb3BzPiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhc2V0LFxuICAgICAgZGF0YXNldHMsXG4gICAgICBzaG93RGF0YXNldFRhYmxlLFxuICAgICAgbGF5ZXJzLFxuICAgICAgdXBkYXRlVGFibGVDb2xvcixcbiAgICAgIHNob3dEZWxldGVEYXRhc2V0LFxuICAgICAgcmVtb3ZlRGF0YXNldCxcbiAgICAgIGxheWVyT3JkZXIsXG4gICAgICBsYXllckNsYXNzZXMsXG4gICAgICB1aVN0YXRlQWN0aW9ucyxcbiAgICAgIHZpc1N0YXRlQWN0aW9uc1xuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGRhdGFzZXRDYXRhbG9nID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICByZXR1cm4ge1tkYXRhc2V0LmlkXTogZGF0YXNldH07XG4gICAgfSwgW2RhdGFzZXRdKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8RGF0YXNldExheWVyU2VjdGlvbldyYXBwZXI+XG4gICAgICAgIDxTb3VyY2VEYXRhQ2F0YWxvZ1xuICAgICAgICAgIGRhdGFzZXRzPXtkYXRhc2V0Q2F0YWxvZ31cbiAgICAgICAgICBzaG93RGF0YXNldFRhYmxlPXtzaG93RGF0YXNldFRhYmxlfVxuICAgICAgICAgIHVwZGF0ZVRhYmxlQ29sb3I9e3VwZGF0ZVRhYmxlQ29sb3J9XG4gICAgICAgICAgcmVtb3ZlRGF0YXNldD17cmVtb3ZlRGF0YXNldH1cbiAgICAgICAgICBzaG93RGVsZXRlRGF0YXNldD17c2hvd0RlbGV0ZURhdGFzZXR9XG4gICAgICAgIC8+XG4gICAgICAgIDxMYXllckxpc3RcbiAgICAgICAgICBkYXRhc2V0cz17ZGF0YXNldHN9XG4gICAgICAgICAgbGF5ZXJPcmRlcj17bGF5ZXJPcmRlcn1cbiAgICAgICAgICBsYXllcnM9e2xheWVyc31cbiAgICAgICAgICBsYXllckNsYXNzZXM9e2xheWVyQ2xhc3Nlc31cbiAgICAgICAgICB1aVN0YXRlQWN0aW9ucz17dWlTdGF0ZUFjdGlvbnN9XG4gICAgICAgICAgdmlzU3RhdGVBY3Rpb25zPXt2aXNTdGF0ZUFjdGlvbnN9XG4gICAgICAgICAgaXNTb3J0YWJsZT17ZmFsc2V9XG4gICAgICAgIC8+XG4gICAgICA8L0RhdGFzZXRMYXllclNlY3Rpb25XcmFwcGVyPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIERhdGFzZXRMYXllclNlY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFzZXRMYXllclNlY3Rpb25GYWN0b3J5O1xuIl19