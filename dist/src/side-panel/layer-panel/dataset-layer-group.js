"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _datasetLayerSection = _interopRequireDefault(require("./dataset-layer-section"));

// Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
DatasetLayerGroupFactory.deps = [_datasetLayerSection["default"]];

function DatasetLayerGroupFactory(DatasetLayerSection) {
  var DatasetLayerGroup = function DatasetLayerGroup(props) {
    var datasets = props.datasets,
        showDatasetTable = props.showDatasetTable,
        layers = props.layers,
        updateTableColor = props.updateTableColor,
        showDeleteDataset = props.showDeleteDataset,
        removeDataset = props.removeDataset,
        layerOrder = props.layerOrder,
        layerClasses = props.layerClasses,
        uiStateActions = props.uiStateActions,
        visStateActions = props.visStateActions;
    var datasetLayerSectionData = (0, _react.useMemo)(function () {
      return Object.values(datasets).map(function (dataset) {
        // Global layer order will contain the correct order of layers
        // We just empty the positions in layers array (for each dataset)
        // where the layer doesn't belong to a dataset and set it to null
        var datasetLayers = layers.map(function (layer) {
          return layer.config.dataId === dataset.id ? layer : null;
        }).filter(function (layer) {
          return Boolean(layer);
        });
        return {
          dataset: dataset,
          datasetLayers: datasetLayers
        };
      });
    }, [datasets, layers]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, datasetLayerSectionData.map(function (dlsData) {
      return /*#__PURE__*/_react["default"].createElement(DatasetLayerSection, {
        key: dlsData.dataset.id,
        dataset: dlsData.dataset,
        layers: dlsData.datasetLayers,
        datasets: datasets,
        showDatasetTable: showDatasetTable,
        updateTableColor: updateTableColor,
        showDeleteDataset: showDeleteDataset,
        removeDataset: removeDataset,
        layerOrder: layerOrder,
        layerClasses: layerClasses,
        uiStateActions: uiStateActions,
        visStateActions: visStateActions
      });
    }));
  };

  return DatasetLayerGroup;
}

var _default = DatasetLayerGroupFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9zaWRlLXBhbmVsL2xheWVyLXBhbmVsL2RhdGFzZXQtbGF5ZXItZ3JvdXAudHN4Il0sIm5hbWVzIjpbIkRhdGFzZXRMYXllckdyb3VwRmFjdG9yeSIsImRlcHMiLCJEYXRhc2V0TGF5ZXJTZWN0aW9uRmFjdG9yeSIsIkRhdGFzZXRMYXllclNlY3Rpb24iLCJEYXRhc2V0TGF5ZXJHcm91cCIsInByb3BzIiwiZGF0YXNldHMiLCJzaG93RGF0YXNldFRhYmxlIiwibGF5ZXJzIiwidXBkYXRlVGFibGVDb2xvciIsInNob3dEZWxldGVEYXRhc2V0IiwicmVtb3ZlRGF0YXNldCIsImxheWVyT3JkZXIiLCJsYXllckNsYXNzZXMiLCJ1aVN0YXRlQWN0aW9ucyIsInZpc1N0YXRlQWN0aW9ucyIsImRhdGFzZXRMYXllclNlY3Rpb25EYXRhIiwiT2JqZWN0IiwidmFsdWVzIiwibWFwIiwiZGF0YXNldCIsImRhdGFzZXRMYXllcnMiLCJsYXllciIsImNvbmZpZyIsImRhdGFJZCIsImlkIiwiZmlsdGVyIiwiQm9vbGVhbiIsImRsc0RhdGEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBb0JBOztBQUVBOztBQXRCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXNCQUEsd0JBQXdCLENBQUNDLElBQXpCLEdBQWdDLENBQUNDLCtCQUFELENBQWhDOztBQUVBLFNBQVNGLHdCQUFULENBQ0VHLG1CQURGLEVBRUU7QUFDQSxNQUFNQyxpQkFBbUQsR0FBRyxTQUF0REEsaUJBQXNELENBQUFDLEtBQUssRUFBSTtBQUFBLFFBRWpFQyxRQUZpRSxHQVkvREQsS0FaK0QsQ0FFakVDLFFBRmlFO0FBQUEsUUFHakVDLGdCQUhpRSxHQVkvREYsS0FaK0QsQ0FHakVFLGdCQUhpRTtBQUFBLFFBSWpFQyxNQUppRSxHQVkvREgsS0FaK0QsQ0FJakVHLE1BSmlFO0FBQUEsUUFLakVDLGdCQUxpRSxHQVkvREosS0FaK0QsQ0FLakVJLGdCQUxpRTtBQUFBLFFBTWpFQyxpQkFOaUUsR0FZL0RMLEtBWitELENBTWpFSyxpQkFOaUU7QUFBQSxRQU9qRUMsYUFQaUUsR0FZL0ROLEtBWitELENBT2pFTSxhQVBpRTtBQUFBLFFBUWpFQyxVQVJpRSxHQVkvRFAsS0FaK0QsQ0FRakVPLFVBUmlFO0FBQUEsUUFTakVDLFlBVGlFLEdBWS9EUixLQVorRCxDQVNqRVEsWUFUaUU7QUFBQSxRQVVqRUMsY0FWaUUsR0FZL0RULEtBWitELENBVWpFUyxjQVZpRTtBQUFBLFFBV2pFQyxlQVhpRSxHQVkvRFYsS0FaK0QsQ0FXakVVLGVBWGlFO0FBY25FLFFBQU1DLHVCQUF1QixHQUFHLG9CQUFRLFlBQU07QUFDNUMsYUFBT0MsTUFBTSxDQUFDQyxNQUFQLENBQWNaLFFBQWQsRUFBd0JhLEdBQXhCLENBQTRCLFVBQUNDLE9BQUQsRUFBMEI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsWUFBTUMsYUFBYSxHQUFHYixNQUFNLENBQ3pCVyxHQURtQixDQUNmLFVBQUFHLEtBQUs7QUFBQSxpQkFBS0EsS0FBSyxDQUFDQyxNQUFOLENBQWFDLE1BQWIsS0FBd0JKLE9BQU8sQ0FBQ0ssRUFBaEMsR0FBcUNILEtBQXJDLEdBQTZDLElBQWxEO0FBQUEsU0FEVSxFQUVuQkksTUFGbUIsQ0FFWixVQUFBSixLQUFLO0FBQUEsaUJBQUlLLE9BQU8sQ0FBQ0wsS0FBRCxDQUFYO0FBQUEsU0FGTyxDQUF0QjtBQUlBLGVBQU87QUFBQ0YsVUFBQUEsT0FBTyxFQUFQQSxPQUFEO0FBQVVDLFVBQUFBLGFBQWEsRUFBYkE7QUFBVixTQUFQO0FBQ0QsT0FUTSxDQUFQO0FBVUQsS0FYK0IsRUFXN0IsQ0FBQ2YsUUFBRCxFQUFXRSxNQUFYLENBWDZCLENBQWhDO0FBYUEsd0JBQ0Usa0VBQ0dRLHVCQUF1QixDQUFDRyxHQUF4QixDQUE0QixVQUFBUyxPQUFPO0FBQUEsMEJBQ2xDLGdDQUFDLG1CQUFEO0FBQ0UsUUFBQSxHQUFHLEVBQUVBLE9BQU8sQ0FBQ1IsT0FBUixDQUFnQkssRUFEdkI7QUFFRSxRQUFBLE9BQU8sRUFBRUcsT0FBTyxDQUFDUixPQUZuQjtBQUdFLFFBQUEsTUFBTSxFQUFFUSxPQUFPLENBQUNQLGFBSGxCO0FBSUUsUUFBQSxRQUFRLEVBQUVmLFFBSlo7QUFLRSxRQUFBLGdCQUFnQixFQUFFQyxnQkFMcEI7QUFNRSxRQUFBLGdCQUFnQixFQUFFRSxnQkFOcEI7QUFPRSxRQUFBLGlCQUFpQixFQUFFQyxpQkFQckI7QUFRRSxRQUFBLGFBQWEsRUFBRUMsYUFSakI7QUFTRSxRQUFBLFVBQVUsRUFBRUMsVUFUZDtBQVVFLFFBQUEsWUFBWSxFQUFFQyxZQVZoQjtBQVdFLFFBQUEsY0FBYyxFQUFFQyxjQVhsQjtBQVlFLFFBQUEsZUFBZSxFQUFFQztBQVpuQixRQURrQztBQUFBLEtBQW5DLENBREgsQ0FERjtBQW9CRCxHQS9DRDs7QUFpREEsU0FBT1gsaUJBQVA7QUFDRDs7ZUFFY0osd0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjMgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QsIHt1c2VNZW1vfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBEYXRhc2V0TGF5ZXJTZWN0aW9uRmFjdG9yeSBmcm9tICcuL2RhdGFzZXQtbGF5ZXItc2VjdGlvbic7XG5pbXBvcnQge0xheWVyLCBMYXllckNsYXNzZXNUeXBlfSBmcm9tICdAa2VwbGVyLmdsL2xheWVycyc7XG5pbXBvcnQge1VJU3RhdGVBY3Rpb25zLCBWaXNTdGF0ZUFjdGlvbnMsIEFjdGlvbkhhbmRsZXJ9IGZyb20gJ0BrZXBsZXIuZ2wvYWN0aW9ucyc7XG5pbXBvcnQge0tlcGxlclRhYmxlLCBEYXRhc2V0c30gZnJvbSAnQGtlcGxlci5nbC90YWJsZSc7XG5cbnR5cGUgRGF0YXNldExheWVyR3JvdXBQcm9wcyA9IHtcbiAgZGF0YXNldHM6IERhdGFzZXRzO1xuICBsYXllcnM6IExheWVyW107XG4gIGxheWVyT3JkZXI6IG51bWJlcltdO1xuICBsYXllckNsYXNzZXM6IExheWVyQ2xhc3Nlc1R5cGU7XG4gIHNob3dEZWxldGVEYXRhc2V0OiBib29sZWFuO1xuICByZW1vdmVEYXRhc2V0OiBBY3Rpb25IYW5kbGVyPHR5cGVvZiBVSVN0YXRlQWN0aW9ucy5vcGVuRGVsZXRlTW9kYWw+O1xuICBzaG93RGF0YXNldFRhYmxlOiBBY3Rpb25IYW5kbGVyPHR5cGVvZiBWaXNTdGF0ZUFjdGlvbnMuc2hvd0RhdGFzZXRUYWJsZT47XG4gIHVwZGF0ZVRhYmxlQ29sb3I6IEFjdGlvbkhhbmRsZXI8dHlwZW9mIFZpc1N0YXRlQWN0aW9ucy51cGRhdGVUYWJsZUNvbG9yPjtcbiAgdWlTdGF0ZUFjdGlvbnM6IHR5cGVvZiBVSVN0YXRlQWN0aW9ucztcbiAgdmlzU3RhdGVBY3Rpb25zOiB0eXBlb2YgVmlzU3RhdGVBY3Rpb25zO1xufTtcblxuRGF0YXNldExheWVyR3JvdXBGYWN0b3J5LmRlcHMgPSBbRGF0YXNldExheWVyU2VjdGlvbkZhY3RvcnldO1xuXG5mdW5jdGlvbiBEYXRhc2V0TGF5ZXJHcm91cEZhY3RvcnkoXG4gIERhdGFzZXRMYXllclNlY3Rpb246IFJldHVyblR5cGU8dHlwZW9mIERhdGFzZXRMYXllclNlY3Rpb25GYWN0b3J5PlxuKSB7XG4gIGNvbnN0IERhdGFzZXRMYXllckdyb3VwOiBSZWFjdC5GQzxEYXRhc2V0TGF5ZXJHcm91cFByb3BzPiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhc2V0cyxcbiAgICAgIHNob3dEYXRhc2V0VGFibGUsXG4gICAgICBsYXllcnMsXG4gICAgICB1cGRhdGVUYWJsZUNvbG9yLFxuICAgICAgc2hvd0RlbGV0ZURhdGFzZXQsXG4gICAgICByZW1vdmVEYXRhc2V0LFxuICAgICAgbGF5ZXJPcmRlcixcbiAgICAgIGxheWVyQ2xhc3NlcyxcbiAgICAgIHVpU3RhdGVBY3Rpb25zLFxuICAgICAgdmlzU3RhdGVBY3Rpb25zXG4gICAgfSA9IHByb3BzO1xuXG4gICAgY29uc3QgZGF0YXNldExheWVyU2VjdGlvbkRhdGEgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKGRhdGFzZXRzKS5tYXAoKGRhdGFzZXQ6IEtlcGxlclRhYmxlKSA9PiB7XG4gICAgICAgIC8vIEdsb2JhbCBsYXllciBvcmRlciB3aWxsIGNvbnRhaW4gdGhlIGNvcnJlY3Qgb3JkZXIgb2YgbGF5ZXJzXG4gICAgICAgIC8vIFdlIGp1c3QgZW1wdHkgdGhlIHBvc2l0aW9ucyBpbiBsYXllcnMgYXJyYXkgKGZvciBlYWNoIGRhdGFzZXQpXG4gICAgICAgIC8vIHdoZXJlIHRoZSBsYXllciBkb2Vzbid0IGJlbG9uZyB0byBhIGRhdGFzZXQgYW5kIHNldCBpdCB0byBudWxsXG4gICAgICAgIGNvbnN0IGRhdGFzZXRMYXllcnMgPSBsYXllcnNcbiAgICAgICAgICAubWFwKGxheWVyID0+IChsYXllci5jb25maWcuZGF0YUlkID09PSBkYXRhc2V0LmlkID8gbGF5ZXIgOiBudWxsKSlcbiAgICAgICAgICAuZmlsdGVyKGxheWVyID0+IEJvb2xlYW4obGF5ZXIpKTtcblxuICAgICAgICByZXR1cm4ge2RhdGFzZXQsIGRhdGFzZXRMYXllcnN9O1xuICAgICAgfSk7XG4gICAgfSwgW2RhdGFzZXRzLCBsYXllcnNdKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7ZGF0YXNldExheWVyU2VjdGlvbkRhdGEubWFwKGRsc0RhdGEgPT4gKFxuICAgICAgICAgIDxEYXRhc2V0TGF5ZXJTZWN0aW9uXG4gICAgICAgICAgICBrZXk9e2Rsc0RhdGEuZGF0YXNldC5pZH1cbiAgICAgICAgICAgIGRhdGFzZXQ9e2Rsc0RhdGEuZGF0YXNldH1cbiAgICAgICAgICAgIGxheWVycz17ZGxzRGF0YS5kYXRhc2V0TGF5ZXJzIGFzIExheWVyW119XG4gICAgICAgICAgICBkYXRhc2V0cz17ZGF0YXNldHN9XG4gICAgICAgICAgICBzaG93RGF0YXNldFRhYmxlPXtzaG93RGF0YXNldFRhYmxlfVxuICAgICAgICAgICAgdXBkYXRlVGFibGVDb2xvcj17dXBkYXRlVGFibGVDb2xvcn1cbiAgICAgICAgICAgIHNob3dEZWxldGVEYXRhc2V0PXtzaG93RGVsZXRlRGF0YXNldH1cbiAgICAgICAgICAgIHJlbW92ZURhdGFzZXQ9e3JlbW92ZURhdGFzZXR9XG4gICAgICAgICAgICBsYXllck9yZGVyPXtsYXllck9yZGVyfVxuICAgICAgICAgICAgbGF5ZXJDbGFzc2VzPXtsYXllckNsYXNzZXN9XG4gICAgICAgICAgICB1aVN0YXRlQWN0aW9ucz17dWlTdGF0ZUFjdGlvbnN9XG4gICAgICAgICAgICB2aXNTdGF0ZUFjdGlvbnM9e3Zpc1N0YXRlQWN0aW9uc31cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIERhdGFzZXRMYXllckdyb3VwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhc2V0TGF5ZXJHcm91cEZhY3Rvcnk7XG4iXX0=