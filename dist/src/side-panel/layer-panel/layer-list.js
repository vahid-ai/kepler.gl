"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _classnames = _interopRequireDefault(require("classnames"));

var _layerPanel = _interopRequireDefault(require("./layer-panel"));

var _core = require("@dnd-kit/core");

var _sortable = require("@dnd-kit/sortable");

var _utilities = require("@dnd-kit/utilities");

var _templateObject;

var SortableStyledItem = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  z-index: ", ";\n  transition: ", ";\n  transform: ", ";\n  &.sorting {\n    opacity: 0.3;\n    pointer-events: none;\n  }\n  &.sorting-layers .layer-panel__header {\n    background-color: ", ";\n    font-family: ", ";\n    font-weight: ", ";\n    font-size: ", ";\n    line-height: ", ";\n    *,\n    *:before,\n    *:after {\n      box-sizing: border-box;\n    }\n    .layer__drag-handle {\n      opacity: 1;\n      color: ", ";\n    }\n  }\n"])), function (props) {
  return props.theme.dropdownWrapperZ + 1;
}, function (props) {
  return props.transition;
}, function (props) {
  return props.transform;
}, function (props) {
  return props.theme.panelBackgroundHover;
}, function (props) {
  return props.theme.fontFamily;
}, function (props) {
  return props.theme.fontWeight;
}, function (props) {
  return props.theme.fontSize;
}, function (props) {
  return props.theme.lineHeight;
}, function (props) {
  return props.theme.textColorHl;
});

LayerListFactory.deps = [_layerPanel["default"]];

function LayerListFactory(LayerPanel) {
  // By wrapping layer panel using a sortable element we don't have to implement the drag and drop logic into the panel itself;
  // Developers can provide any layer panel implementation and it will still be sortable
  var SortableItem = function SortableItem(_ref) {
    var layerId = _ref.layerId,
        layers = _ref.layers,
        layerIndex = _ref.layerIndex,
        panelProps = _ref.panelProps,
        layerActions = _ref.layerActions;

    var _useSortable = (0, _sortable.useSortable)({
      id: layerId
    }),
        attributes = _useSortable.attributes,
        listeners = _useSortable.listeners,
        setNodeRef = _useSortable.setNodeRef,
        isDragging = _useSortable.isDragging,
        transform = _useSortable.transform,
        transition = _useSortable.transition;

    return /*#__PURE__*/_react["default"].createElement(SortableStyledItem, (0, _extends2["default"])({
      ref: setNodeRef,
      className: (0, _classnames["default"])('sortable-layer-items', {
        sorting: isDragging
      }),
      transform: _utilities.CSS.Transform.toString(transform),
      transition: transition
    }, attributes), /*#__PURE__*/_react["default"].createElement(LayerPanel, (0, _extends2["default"])({}, panelProps, layerActions, {
      key: layerId,
      idx: layerIndex,
      layer: layers[layerIndex],
      listeners: listeners
    })));
  };

  var SortableList = function SortableList(_ref2) {
    var containerId = _ref2.containerId,
        sidePanelDndItems = _ref2.sidePanelDndItems,
        children = _ref2.children;

    var _useDroppable = (0, _core.useDroppable)({
      id: containerId
    }),
        setNodeRef = _useDroppable.setNodeRef;

    return /*#__PURE__*/_react["default"].createElement(_sortable.SortableContext, {
      id: containerId,
      items: sidePanelDndItems,
      strategy: _sortable.verticalListSortingStrategy
    }, /*#__PURE__*/_react["default"].createElement("div", {
      ref: setNodeRef
    }, children));
  };

  var LayerList = function LayerList(props) {
    var layers = props.layers,
        datasets = props.datasets,
        layerOrder = props.layerOrder,
        uiStateActions = props.uiStateActions,
        visStateActions = props.visStateActions,
        layerClasses = props.layerClasses,
        _props$isSortable = props.isSortable,
        isSortable = _props$isSortable === void 0 ? true : _props$isSortable;
    var openModal = uiStateActions.toggleModal;
    var layerOrdersToShow = (0, _react.useMemo)(function () {
      return layerOrder.filter(function (layerIdx) {
        return Boolean(layers[layerIdx]) && !layers[layerIdx].config.hidden;
      });
    }, [layers, layerOrder]);
    var sidePanelDndItems = (0, _react.useMemo)(function () {
      return layerOrdersToShow.map(function (layerIdx) {
        return layers[layerIdx].id;
      });
    }, [layerOrdersToShow, layers]);
    var layerTypeOptions = (0, _react.useMemo)(function () {
      return Object.keys(layerClasses).map(function (key) {
        var layer = new layerClasses[key]();
        return {
          id: key,
          label: layer.name,
          icon: layer.layerIcon,
          requireData: layer.requireData
        };
      });
    }, [layerClasses]);
    var layerActions = {
      layerColorUIChange: visStateActions.layerColorUIChange,
      layerConfigChange: visStateActions.layerConfigChange,
      layerVisualChannelConfigChange: visStateActions.layerVisualChannelConfigChange,
      layerTypeChange: visStateActions.layerTypeChange,
      layerVisConfigChange: visStateActions.layerVisConfigChange,
      layerTextLabelChange: visStateActions.layerTextLabelChange,
      removeLayer: visStateActions.removeLayer,
      duplicateLayer: visStateActions.duplicateLayer,
      layerSetIsValid: visStateActions.layerSetIsValid
    };
    var panelProps = {
      datasets: datasets,
      openModal: openModal,
      layerTypeOptions: layerTypeOptions
    };
    return isSortable ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(SortableList, {
      containerId: "sortablelist",
      sidePanelDndItems: sidePanelDndItems
    }, layerOrdersToShow.map(function (layerIdx) {
      return /*#__PURE__*/_react["default"].createElement(SortableItem, {
        key: layers[layerIdx].id,
        layerId: layers[layerIdx].id,
        panelProps: panelProps,
        layerActions: layerActions,
        layers: layers,
        layerIndex: layerIdx
      });
    }))) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, layerOrder.map(function (layerIdx) {
      return layers[layerIdx] && !layers[layerIdx].config.hidden && /*#__PURE__*/_react["default"].createElement(LayerPanel, (0, _extends2["default"])({}, panelProps, layerActions, {
        key: layers[layerIdx].id,
        idx: layerIdx,
        layer: layers[layerIdx],
        isDraggable: false
      }));
    }));
  };

  return LayerList;
}

var _default = LayerListFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,