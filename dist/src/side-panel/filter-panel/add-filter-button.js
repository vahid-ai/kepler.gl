"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _addByDatasetButton = _interopRequireDefault(require("../add-by-dataset-button"));

// Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
function AddFilterButtonFactory() {
  var AddFilterButton = function AddFilterButton(_ref) {
    var datasets = _ref.datasets,
        onAdd = _ref.onAdd;
    return /*#__PURE__*/_react["default"].createElement(_addByDatasetButton["default"], {
      datasets: datasets,
      className: "add-filter-button",
      width: "105px",
      onAdd: onAdd,
      buttonIntlId: "filterManager.addFilter"
    });
  };

  return AddFilterButton;
}

var _default = AddFilterButtonFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9zaWRlLXBhbmVsL2ZpbHRlci1wYW5lbC9hZGQtZmlsdGVyLWJ1dHRvbi50c3giXSwibmFtZXMiOlsiQWRkRmlsdGVyQnV0dG9uRmFjdG9yeSIsIkFkZEZpbHRlckJ1dHRvbiIsImRhdGFzZXRzIiwib25BZGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQW9CQTs7QUFFQTs7QUF0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFXQSxTQUFTQSxzQkFBVCxHQUFrQztBQUNoQyxNQUFNQyxlQUErQyxHQUFHLFNBQWxEQSxlQUFrRCxPQUF1QjtBQUFBLFFBQXJCQyxRQUFxQixRQUFyQkEsUUFBcUI7QUFBQSxRQUFYQyxLQUFXLFFBQVhBLEtBQVc7QUFDN0Usd0JBQ0UsZ0NBQUMsOEJBQUQ7QUFDRSxNQUFBLFFBQVEsRUFBRUQsUUFEWjtBQUVFLE1BQUEsU0FBUyxFQUFDLG1CQUZaO0FBR0UsTUFBQSxLQUFLLEVBQUMsT0FIUjtBQUlFLE1BQUEsS0FBSyxFQUFFQyxLQUpUO0FBS0UsTUFBQSxZQUFZLEVBQUM7QUFMZixNQURGO0FBU0QsR0FWRDs7QUFZQSxTQUFPRixlQUFQO0FBQ0Q7O2VBRWNELHNCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIzIFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7RGF0YXNldHN9IGZyb20gJ0BrZXBsZXIuZ2wvdGFibGUnO1xuaW1wb3J0IEFkZEJ5RGF0YXNldEJ1dHRvbiBmcm9tICcuLi9hZGQtYnktZGF0YXNldC1idXR0b24nO1xuXG5leHBvcnQgdHlwZSBBZGRGaWx0ZXJCdXR0b25Qcm9wcyA9IHtcbiAgZGF0YXNldHM6IERhdGFzZXRzO1xuICBvbkFkZDogKGRhdGFJZDogc3RyaW5nKSA9PiB2b2lkO1xufTtcblxuZnVuY3Rpb24gQWRkRmlsdGVyQnV0dG9uRmFjdG9yeSgpIHtcbiAgY29uc3QgQWRkRmlsdGVyQnV0dG9uOiBSZWFjdC5GQzxBZGRGaWx0ZXJCdXR0b25Qcm9wcz4gPSAoe2RhdGFzZXRzLCBvbkFkZH0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPEFkZEJ5RGF0YXNldEJ1dHRvblxuICAgICAgICBkYXRhc2V0cz17ZGF0YXNldHN9XG4gICAgICAgIGNsYXNzTmFtZT1cImFkZC1maWx0ZXItYnV0dG9uXCJcbiAgICAgICAgd2lkdGg9XCIxMDVweFwiXG4gICAgICAgIG9uQWRkPXtvbkFkZH1cbiAgICAgICAgYnV0dG9uSW50bElkPVwiZmlsdGVyTWFuYWdlci5hZGRGaWx0ZXJcIlxuICAgICAgLz5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBBZGRGaWx0ZXJCdXR0b247XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFkZEZpbHRlckJ1dHRvbkZhY3Rvcnk7XG4iXX0=