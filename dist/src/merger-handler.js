"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidMerger = isValidMerger;
exports.mergeStateFromMergers = mergeStateFromMergers;
exports.hasPropsToMerge = hasPropsToMerge;
exports.getPropValueToMerger = getPropValueToMerger;
exports.resetStateToMergeProps = resetStateToMergeProps;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _tasks = require("react-palm/tasks");

var _utils = require("@kepler.gl/utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function isValidMerger(merger) {
  return (0, _utils.isObject)(merger) && typeof merger.merge === 'function' && (typeof merger.prop === 'string' || Array.isArray(merger.prop));
}
/**
 * Call state updater, return the tasks created by the state update with withTask()
 */


function callFunctionGetTask(fn) {
  var before = (0, _tasks.getGlobalTaskQueue)();
  var ret = fn();
  var after = (0, _tasks.getGlobalTaskQueue)();
  var diff = after.filter(function (t) {
    return !before.includes(t);
  });
  return [ret, diff];
}

function mergeStateFromMergers(state, initialState, mergers, postMergerPayload) {
  // const newDataIds = Object.keys(postMergerPayload.newDataEntries);
  var mergedState = state; // merge state with config to be merged

  var mergerQueue = (0, _toConsumableArray2["default"])(mergers);

  var _loop = function _loop() {
    var merger = mergerQueue.shift();

    if (merger && isValidMerger(merger) && merger.toMergeProp && hasPropsToMerge(state, merger.toMergeProp)) {
      // put the rest of mergers and payload for postMergeUpdater in mergerActionPayload
      // and pass it to current merger, which (if async) knows to continue merging
      var mergerActionPayload = {
        mergers: mergerQueue,
        postMergerPayload: postMergerPayload
      }; // reset toMerge

      var toMerge = getPropValueToMerger(mergedState, merger.toMergeProp, merger.toMergeProp);
      mergedState = resetStateToMergeProps(mergedState, initialState, merger.toMergeProp); // call merger
      // eslint-disable-next-line no-loop-func

      var mergeFunc = function mergeFunc() {
        return merger.merge(mergedState, toMerge, false, mergerActionPayload);
      };

      var _callFunctionGetTask = callFunctionGetTask(mergeFunc),
          _callFunctionGetTask2 = (0, _slicedToArray2["default"])(_callFunctionGetTask, 2),
          updatedState = _callFunctionGetTask2[0],
          newTasks = _callFunctionGetTask2[1];

      mergedState = updatedState; // check if asyncTask was created (time consuming tasks)

      if (newTasks.length && merger.waitToFinish) {
        // skip rest, the async merger will call applyMergerupdater() to continue
        return {
          v: {
            mergedState: mergedState,
            allMerged: false
          }
        };
      }
    }
  };

  while (mergerQueue.length) {
    var _ret = _loop();

    if ((0, _typeof2["default"])(_ret) === "object") return _ret.v;
  } // we merged all mergers in the queue, and we can call post merger now


  return {
    mergedState: mergedState,
    allMerged: true
  };
}

function hasPropsToMerge(state, mergerProps) {
  return Array.isArray(mergerProps) ? Boolean(mergerProps.some(function (p) {
    return state.hasOwnProperty(p);
  })) : typeof mergerProps === 'string' && state.hasOwnProperty(mergerProps);
}

function getPropValueToMerger(state, mergerProps, toMergeProps) {
  return Array.isArray(mergerProps) ? mergerProps.reduce(function (accu, p, i) {
    if (!toMergeProps) return accu;
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, toMergeProps[i], state[p]));
  }, {}) : state[mergerProps];
}

function resetStateToMergeProps(state, initialState, mergerProps) {
  return (0, _utils.toArray)(mergerProps).reduce(function (accu, prop) {
    return _objectSpread(_objectSpread({}, accu), {}, (0, _defineProperty2["default"])({}, prop, initialState[prop]));
  }, state);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,