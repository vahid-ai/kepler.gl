"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.messages = exports.flattenMessages = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _en = _interopRequireDefault(require("./translations/en"));

var _fi = _interopRequireDefault(require("./translations/fi"));

var _pt = _interopRequireDefault(require("./translations/pt"));

var _es = _interopRequireDefault(require("./translations/es"));

var _ca = _interopRequireDefault(require("./translations/ca"));

var _cn = _interopRequireDefault(require("./translations/cn"));

var _ja = _interopRequireDefault(require("./translations/ja"));

var _ru = _interopRequireDefault(require("./translations/ru"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Flat messages since react-intl does not seem to support nested structures
// Adapted from https://medium.com/siren-apparel-press/internationalization-and-localization-of-sirenapparel-eu-sirenapparel-us-and-sirenapparel-asia-ddee266066a2
var flattenMessages = function flattenMessages(nestedMessages) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return Object.keys(nestedMessages).reduce(function (messages, key) {
    var value = nestedMessages[key];
    var prefixedKey = prefix ? "".concat(prefix, ".").concat(key) : key;

    if (typeof value === 'string') {
      messages[prefixedKey] = value;
    } else {
      Object.assign(messages, flattenMessages(value, prefixedKey));
    }

    return messages;
  }, {});
};

exports.flattenMessages = flattenMessages;
var enFlat = flattenMessages(_en["default"]);
var messages = {};
exports.messages = messages;
messages.en = enFlat;
messages.fi = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_fi["default"]));
messages.pt = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_pt["default"]));
messages.es = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_es["default"]));
messages.ca = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_ca["default"]));
messages.cn = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_cn["default"]));
messages.ja = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_ja["default"]));
messages.ru = _objectSpread(_objectSpread({}, enFlat), flattenMessages(_ru["default"]));
var _default = messages;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2NhbGl6YXRpb24vc3JjL21lc3NhZ2VzLnRzIl0sIm5hbWVzIjpbImZsYXR0ZW5NZXNzYWdlcyIsIm5lc3RlZE1lc3NhZ2VzIiwicHJlZml4IiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsIm1lc3NhZ2VzIiwia2V5IiwidmFsdWUiLCJwcmVmaXhlZEtleSIsImFzc2lnbiIsImVuRmxhdCIsImVuIiwiZmkiLCJwdCIsImVzIiwiY2EiLCJjbiIsImphIiwicnUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFFQTtBQUNBO0FBQ08sSUFBTUEsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUM3QkMsY0FENkIsRUFLMUI7QUFBQSxNQUhIQyxNQUdHLHVFQUhNLEVBR047QUFDSCxTQUFPQyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsY0FBWixFQUE0QkksTUFBNUIsQ0FBbUMsVUFBQ0MsUUFBRCxFQUFXQyxHQUFYLEVBQW1CO0FBQzNELFFBQU1DLEtBQUssR0FBR1AsY0FBYyxDQUFDTSxHQUFELENBQTVCO0FBQ0EsUUFBTUUsV0FBVyxHQUFHUCxNQUFNLGFBQU1BLE1BQU4sY0FBZ0JLLEdBQWhCLElBQXdCQSxHQUFsRDs7QUFDQSxRQUFJLE9BQU9DLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0JGLE1BQUFBLFFBQVEsQ0FBQ0csV0FBRCxDQUFSLEdBQXdCRCxLQUF4QjtBQUNELEtBRkQsTUFFTztBQUNMTCxNQUFBQSxNQUFNLENBQUNPLE1BQVAsQ0FBY0osUUFBZCxFQUF3Qk4sZUFBZSxDQUFDUSxLQUFELEVBQVFDLFdBQVIsQ0FBdkM7QUFDRDs7QUFDRCxXQUFPSCxRQUFQO0FBQ0QsR0FUTSxFQVNKLEVBVEksQ0FBUDtBQVVELENBaEJNOzs7QUFrQlAsSUFBTUssTUFBTSxHQUFHWCxlQUFlLENBQUNZLGNBQUQsQ0FBOUI7QUFFTyxJQUFNTixRQUlaLEdBQUcsRUFKRzs7QUFNUEEsUUFBUSxDQUFDTSxFQUFULEdBQWNELE1BQWQ7QUFDQUwsUUFBUSxDQUFDTyxFQUFULG1DQUFrQkYsTUFBbEIsR0FBNkJYLGVBQWUsQ0FBQ2EsY0FBRCxDQUE1QztBQUNBUCxRQUFRLENBQUNRLEVBQVQsbUNBQWtCSCxNQUFsQixHQUE2QlgsZUFBZSxDQUFDYyxjQUFELENBQTVDO0FBQ0FSLFFBQVEsQ0FBQ1MsRUFBVCxtQ0FBa0JKLE1BQWxCLEdBQTZCWCxlQUFlLENBQUNlLGNBQUQsQ0FBNUM7QUFDQVQsUUFBUSxDQUFDVSxFQUFULG1DQUFrQkwsTUFBbEIsR0FBNkJYLGVBQWUsQ0FBQ2dCLGNBQUQsQ0FBNUM7QUFDQVYsUUFBUSxDQUFDVyxFQUFULG1DQUFrQk4sTUFBbEIsR0FBNkJYLGVBQWUsQ0FBQ2lCLGNBQUQsQ0FBNUM7QUFDQVgsUUFBUSxDQUFDWSxFQUFULG1DQUFrQlAsTUFBbEIsR0FBNkJYLGVBQWUsQ0FBQ2tCLGNBQUQsQ0FBNUM7QUFDQVosUUFBUSxDQUFDYSxFQUFULG1DQUFrQlIsTUFBbEIsR0FBNkJYLGVBQWUsQ0FBQ21CLGNBQUQsQ0FBNUM7ZUFFZWIsUSIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBlbiBmcm9tICcuL3RyYW5zbGF0aW9ucy9lbic7XG5pbXBvcnQgZmkgZnJvbSAnLi90cmFuc2xhdGlvbnMvZmknO1xuaW1wb3J0IHB0IGZyb20gJy4vdHJhbnNsYXRpb25zL3B0JztcbmltcG9ydCBlcyBmcm9tICcuL3RyYW5zbGF0aW9ucy9lcyc7XG5pbXBvcnQgY2EgZnJvbSAnLi90cmFuc2xhdGlvbnMvY2EnO1xuaW1wb3J0IGNuIGZyb20gJy4vdHJhbnNsYXRpb25zL2NuJztcbmltcG9ydCBqYSBmcm9tICcuL3RyYW5zbGF0aW9ucy9qYSc7XG5pbXBvcnQgcnUgZnJvbSAnLi90cmFuc2xhdGlvbnMvcnUnO1xuXG4vLyBGbGF0IG1lc3NhZ2VzIHNpbmNlIHJlYWN0LWludGwgZG9lcyBub3Qgc2VlbSB0byBzdXBwb3J0IG5lc3RlZCBzdHJ1Y3R1cmVzXG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9tZWRpdW0uY29tL3NpcmVuLWFwcGFyZWwtcHJlc3MvaW50ZXJuYXRpb25hbGl6YXRpb24tYW5kLWxvY2FsaXphdGlvbi1vZi1zaXJlbmFwcGFyZWwtZXUtc2lyZW5hcHBhcmVsLXVzLWFuZC1zaXJlbmFwcGFyZWwtYXNpYS1kZGVlMjY2MDY2YTJcbmV4cG9ydCBjb25zdCBmbGF0dGVuTWVzc2FnZXMgPSAoXG4gIG5lc3RlZE1lc3NhZ2VzLFxuICBwcmVmaXggPSAnJ1xuKToge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59ID0+IHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG5lc3RlZE1lc3NhZ2VzKS5yZWR1Y2UoKG1lc3NhZ2VzLCBrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IG5lc3RlZE1lc3NhZ2VzW2tleV07XG4gICAgY29uc3QgcHJlZml4ZWRLZXkgPSBwcmVmaXggPyBgJHtwcmVmaXh9LiR7a2V5fWAgOiBrZXk7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1lc3NhZ2VzW3ByZWZpeGVkS2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuYXNzaWduKG1lc3NhZ2VzLCBmbGF0dGVuTWVzc2FnZXModmFsdWUsIHByZWZpeGVkS2V5KSk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlcztcbiAgfSwge30pO1xufTtcblxuY29uc3QgZW5GbGF0ID0gZmxhdHRlbk1lc3NhZ2VzKGVuKTtcblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VzOiB7XG4gIFtrZXk6IHN0cmluZ106IHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gIH07XG59ID0ge307XG5cbm1lc3NhZ2VzLmVuID0gZW5GbGF0O1xubWVzc2FnZXMuZmkgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMoZmkpfTtcbm1lc3NhZ2VzLnB0ID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKHB0KX07XG5tZXNzYWdlcy5lcyA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhlcyl9O1xubWVzc2FnZXMuY2EgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMoY2EpfTtcbm1lc3NhZ2VzLmNuID0gey4uLmVuRmxhdCwgLi4uZmxhdHRlbk1lc3NhZ2VzKGNuKX07XG5tZXNzYWdlcy5qYSA9IHsuLi5lbkZsYXQsIC4uLmZsYXR0ZW5NZXNzYWdlcyhqYSl9O1xubWVzc2FnZXMucnUgPSB7Li4uZW5GbGF0LCAuLi5mbGF0dGVuTWVzc2FnZXMocnUpfTtcblxuZXhwb3J0IGRlZmF1bHQgbWVzc2FnZXM7XG4iXX0=