"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

var _animationController = _interopRequireDefault(require("./common/animation-control/animation-controller"));

LayerAnimationControllerFactory.deps = [_animationController["default"]];

function LayerAnimationControllerFactory(AnimationController) {
  var LayerAnimationController = function LayerAnimationController(_ref) {
    var animationConfig = _ref.animationConfig,
        setLayerAnimationTime = _ref.setLayerAnimationTime,
        children = _ref.children;
    var timeSteps = animationConfig.timeSteps,
        domain = animationConfig.domain;
    var setTimelineValue = (0, _react.useCallback)(function (value) {
      if (Array.isArray(timeSteps)) {
        setLayerAnimationTime((0, _utils.snapToMarks)((0, _utils.toArray)(value)[0], timeSteps)); // TODO: merge slider in to avoid this step
      } else if (domain && value >= domain[0] && value <= domain[1]) {
        setLayerAnimationTime(value);
      }
    }, [domain, setLayerAnimationTime, timeSteps]);
    var timeline = (0, _utils.getTimelineFromAnimationConfig)(animationConfig);
    return /*#__PURE__*/_react["default"].createElement(AnimationController, {
      key: "layer-control",
      value: Number(animationConfig.currentTime),
      domain: animationConfig.domain,
      speed: animationConfig.speed,
      isAnimating: animationConfig.isAnimating,
      steps: animationConfig.timeSteps,
      animationWindow: animationConfig.timeSteps ? _constants.ANIMATION_WINDOW.interval : _constants.ANIMATION_WINDOW.point,
      setTimelineValue: setTimelineValue,
      timeline: timeline,
      children: children
    });
  };

  return LayerAnimationController;
}

var _default = LayerAnimationControllerFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9sYXllci1hbmltYXRpb24tY29udHJvbGxlci50c3giXSwibmFtZXMiOlsiTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSIsImRlcHMiLCJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeSIsIkFuaW1hdGlvbkNvbnRyb2xsZXIiLCJMYXllckFuaW1hdGlvbkNvbnRyb2xsZXIiLCJhbmltYXRpb25Db25maWciLCJzZXRMYXllckFuaW1hdGlvblRpbWUiLCJjaGlsZHJlbiIsInRpbWVTdGVwcyIsImRvbWFpbiIsInNldFRpbWVsaW5lVmFsdWUiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsInRpbWVsaW5lIiwiTnVtYmVyIiwiY3VycmVudFRpbWUiLCJzcGVlZCIsImlzQW5pbWF0aW5nIiwiQU5JTUFUSU9OX1dJTkRPVyIsImludGVydmFsIiwicG9pbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBT0FBLCtCQUErQixDQUFDQyxJQUFoQyxHQUF1QyxDQUFDQywrQkFBRCxDQUF2Qzs7QUFFQSxTQUFTRiwrQkFBVCxDQUNFRyxtQkFERixFQUVFO0FBQ0EsTUFBTUMsd0JBQWlFLEdBQUcsU0FBcEVBLHdCQUFvRSxPQUlwRTtBQUFBLFFBSEpDLGVBR0ksUUFISkEsZUFHSTtBQUFBLFFBRkpDLHFCQUVJLFFBRkpBLHFCQUVJO0FBQUEsUUFESkMsUUFDSSxRQURKQSxRQUNJO0FBQUEsUUFDR0MsU0FESCxHQUN3QkgsZUFEeEIsQ0FDR0csU0FESDtBQUFBLFFBQ2NDLE1BRGQsR0FDd0JKLGVBRHhCLENBQ2NJLE1BRGQ7QUFHSixRQUFNQyxnQkFBZ0IsR0FBRyx3QkFDdkIsVUFBQ0MsS0FBRCxFQUFtQjtBQUNqQixVQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0wsU0FBZCxDQUFKLEVBQThCO0FBQzVCRixRQUFBQSxxQkFBcUIsQ0FBQyx3QkFBWSxvQkFBUUssS0FBUixFQUFlLENBQWYsQ0FBWixFQUErQkgsU0FBL0IsQ0FBRCxDQUFyQixDQUQ0QixDQUc1QjtBQUNELE9BSkQsTUFJTyxJQUFJQyxNQUFNLElBQUlFLEtBQUssSUFBSUYsTUFBTSxDQUFDLENBQUQsQ0FBekIsSUFBZ0NFLEtBQUssSUFBSUYsTUFBTSxDQUFDLENBQUQsQ0FBbkQsRUFBd0Q7QUFDN0RILFFBQUFBLHFCQUFxQixDQUFDSyxLQUFELENBQXJCO0FBQ0Q7QUFDRixLQVRzQixFQVV2QixDQUFDRixNQUFELEVBQVNILHFCQUFULEVBQWdDRSxTQUFoQyxDQVZ1QixDQUF6QjtBQWFBLFFBQU1NLFFBQVEsR0FBRywyQ0FBK0JULGVBQS9CLENBQWpCO0FBRUEsd0JBQ0UsZ0NBQUMsbUJBQUQ7QUFDRSxNQUFBLEdBQUcsRUFBQyxlQUROO0FBRUUsTUFBQSxLQUFLLEVBQUVVLE1BQU0sQ0FBQ1YsZUFBZSxDQUFDVyxXQUFqQixDQUZmO0FBR0UsTUFBQSxNQUFNLEVBQUVYLGVBQWUsQ0FBQ0ksTUFIMUI7QUFJRSxNQUFBLEtBQUssRUFBRUosZUFBZSxDQUFDWSxLQUp6QjtBQUtFLE1BQUEsV0FBVyxFQUFFWixlQUFlLENBQUNhLFdBTC9CO0FBTUUsTUFBQSxLQUFLLEVBQUViLGVBQWUsQ0FBQ0csU0FOekI7QUFPRSxNQUFBLGVBQWUsRUFDYkgsZUFBZSxDQUFDRyxTQUFoQixHQUE0QlcsNEJBQWlCQyxRQUE3QyxHQUF3REQsNEJBQWlCRSxLQVI3RTtBQVVFLE1BQUEsZ0JBQWdCLEVBQUVYLGdCQVZwQjtBQVdFLE1BQUEsUUFBUSxFQUFFSSxRQVhaO0FBWUUsTUFBQSxRQUFRLEVBQUVQO0FBWlosTUFERjtBQWdCRCxHQXRDRDs7QUF1Q0EsU0FBT0gsd0JBQVA7QUFDRDs7ZUFFY0osK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VDYWxsYmFja30gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtBTklNQVRJT05fV0lORE9XfSBmcm9tICdAa2VwbGVyLmdsL2NvbnN0YW50cyc7XG5pbXBvcnQge0FuaW1hdGlvbkNvbmZpZ30gZnJvbSAnQGtlcGxlci5nbC90eXBlcyc7XG5pbXBvcnQge3NuYXBUb01hcmtzLCBnZXRUaW1lbGluZUZyb21BbmltYXRpb25Db25maWcsIHRvQXJyYXl9IGZyb20gJ0BrZXBsZXIuZ2wvdXRpbHMnO1xuaW1wb3J0IEFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5IGZyb20gJy4vY29tbW9uL2FuaW1hdGlvbi1jb250cm9sL2FuaW1hdGlvbi1jb250cm9sbGVyJztcblxuaW50ZXJmYWNlIExheWVyQW5pbWF0aW9uQ29udHJvbGxlclByb3BzIHtcbiAgYW5pbWF0aW9uQ29uZmlnOiBBbmltYXRpb25Db25maWc7XG4gIHNldExheWVyQW5pbWF0aW9uVGltZTogKHg6IG51bWJlcikgPT4gdm9pZDtcbn1cblxuTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeS5kZXBzID0gW0FuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5XTtcblxuZnVuY3Rpb24gTGF5ZXJBbmltYXRpb25Db250cm9sbGVyRmFjdG9yeShcbiAgQW5pbWF0aW9uQ29udHJvbGxlcjogUmV0dXJuVHlwZTx0eXBlb2YgQW5pbWF0aW9uQ29udHJvbGxlckZhY3Rvcnk+XG4pIHtcbiAgY29uc3QgTGF5ZXJBbmltYXRpb25Db250cm9sbGVyOiBSZWFjdC5GQzxMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJQcm9wcz4gPSAoe1xuICAgIGFuaW1hdGlvbkNvbmZpZyxcbiAgICBzZXRMYXllckFuaW1hdGlvblRpbWUsXG4gICAgY2hpbGRyZW5cbiAgfSkgPT4ge1xuICAgIGNvbnN0IHt0aW1lU3RlcHMsIGRvbWFpbn0gPSBhbmltYXRpb25Db25maWc7XG5cbiAgICBjb25zdCBzZXRUaW1lbGluZVZhbHVlID0gdXNlQ2FsbGJhY2soXG4gICAgICAodmFsdWU6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aW1lU3RlcHMpKSB7XG4gICAgICAgICAgc2V0TGF5ZXJBbmltYXRpb25UaW1lKHNuYXBUb01hcmtzKHRvQXJyYXkodmFsdWUpWzBdLCB0aW1lU3RlcHMpKTtcblxuICAgICAgICAgIC8vIFRPRE86IG1lcmdlIHNsaWRlciBpbiB0byBhdm9pZCB0aGlzIHN0ZXBcbiAgICAgICAgfSBlbHNlIGlmIChkb21haW4gJiYgdmFsdWUgPj0gZG9tYWluWzBdICYmIHZhbHVlIDw9IGRvbWFpblsxXSkge1xuICAgICAgICAgIHNldExheWVyQW5pbWF0aW9uVGltZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbZG9tYWluLCBzZXRMYXllckFuaW1hdGlvblRpbWUsIHRpbWVTdGVwc11cbiAgICApO1xuXG4gICAgY29uc3QgdGltZWxpbmUgPSBnZXRUaW1lbGluZUZyb21BbmltYXRpb25Db25maWcoYW5pbWF0aW9uQ29uZmlnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0aW9uQ29udHJvbGxlclxuICAgICAgICBrZXk9XCJsYXllci1jb250cm9sXCJcbiAgICAgICAgdmFsdWU9e051bWJlcihhbmltYXRpb25Db25maWcuY3VycmVudFRpbWUpfVxuICAgICAgICBkb21haW49e2FuaW1hdGlvbkNvbmZpZy5kb21haW59XG4gICAgICAgIHNwZWVkPXthbmltYXRpb25Db25maWcuc3BlZWR9XG4gICAgICAgIGlzQW5pbWF0aW5nPXthbmltYXRpb25Db25maWcuaXNBbmltYXRpbmd9XG4gICAgICAgIHN0ZXBzPXthbmltYXRpb25Db25maWcudGltZVN0ZXBzfVxuICAgICAgICBhbmltYXRpb25XaW5kb3c9e1xuICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZy50aW1lU3RlcHMgPyBBTklNQVRJT05fV0lORE9XLmludGVydmFsIDogQU5JTUFUSU9OX1dJTkRPVy5wb2ludFxuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVsaW5lVmFsdWU9e3NldFRpbWVsaW5lVmFsdWV9XG4gICAgICAgIHRpbWVsaW5lPXt0aW1lbGluZX1cbiAgICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgLz5cbiAgICApO1xuICB9O1xuICByZXR1cm4gTGF5ZXJBbmltYXRpb25Db250cm9sbGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBMYXllckFuaW1hdGlvbkNvbnRyb2xsZXJGYWN0b3J5O1xuIl19