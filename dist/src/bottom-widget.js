"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = BottomWidgetFactory;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _constants = require("@kepler.gl/constants");

var _utils = require("@kepler.gl/utils");

var _styles = require("@kepler.gl/styles");

var _timeWidget = _interopRequireDefault(require("./filters/time-widget"));

var _filterAnimationController = _interopRequireDefault(require("./filter-animation-controller"));

var _layerAnimationController = _interopRequireDefault(require("./layer-animation-controller"));

var _animationControl = _interopRequireDefault(require("./common/animation-control/animation-control"));

var _templateObject, _templateObject2, _templateObject3;

var maxWidth = 1080;

var BottomWidgetContainer = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  padding-top: ", "px;\n  padding-right: ", "px;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  pointer-events: none !important; /* prevent padding from blocking input */\n  & > * {\n    /* all children should allow input */\n    pointer-events: all;\n  }\n  width: ", "px;\n  z-index: 1;\n  ", "\n"])), function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingTop : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingRight : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingBottom : 0;
}, function (props) {
  return props.hasPadding ? props.theme.bottomWidgetPaddingLeft : 0;
}, function (props) {
  return props.width;
}, _styles.media.portable(_templateObject2 || (_templateObject2 = (0, _taggedTemplateLiteral2["default"])(["padding: 0;"]))));

BottomWidgetFactory.deps = [_timeWidget["default"], _animationControl["default"], _filterAnimationController["default"], _layerAnimationController["default"]];
/* eslint-disable complexity */

function BottomWidgetFactory(TimeWidget, AnimationControl, FilterAnimationController, LayerAnimationController) {
  var LayerAnimationControl = (0, _styledComponents["default"])(AnimationControl)(_templateObject3 || (_templateObject3 = (0, _taggedTemplateLiteral2["default"])(["\n    background-color: ", ";\n  "])), function (props) {
    return props.theme.sidePanelBg;
  });

  var BottomWidget = function BottomWidget(props) {
    var _uiState$mapControls, _uiState$mapControls$, _uiState$mapControls2, _uiState$mapControls3, _theme$mapControl, _theme$mapControl2, _theme$mapControl2$ma, _theme$mapControl2$ma2;

    var datasets = props.datasets,
        filters = props.filters,
        animationConfig = props.animationConfig,
        visStateActions = props.visStateActions,
        containerW = props.containerW,
        uiState = props.uiState,
        sidePanelWidth = props.sidePanelWidth,
        layers = props.layers,
        rootRef = props.rootRef,
        theme = props.theme;
    var activeSidePanel = uiState.activeSidePanel,
        readOnly = uiState.readOnly;
    var isOpen = Boolean(activeSidePanel);
    var enlargedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return !(0, _utils.isSideFilter)(f);
      });
    }, [filters]);
    var isMobile = (0, _utils.hasPortableWidth)(_styles.breakPointValues);
    var animatedFilterIdx = (0, _react.useMemo)(function () {
      return filters.findIndex(function (f) {
        return f.isAnimating;
      });
    }, [filters]);
    var animatedFilter = animatedFilterIdx > -1 ? filters[animatedFilterIdx] : null;
    var isLegendPinned = ((_uiState$mapControls = uiState.mapControls) === null || _uiState$mapControls === void 0 ? void 0 : (_uiState$mapControls$ = _uiState$mapControls.mapLegend) === null || _uiState$mapControls$ === void 0 ? void 0 : _uiState$mapControls$.show) && ((_uiState$mapControls2 = uiState.mapControls) === null || _uiState$mapControls2 === void 0 ? void 0 : (_uiState$mapControls3 = _uiState$mapControls2.mapLegend) === null || _uiState$mapControls3 === void 0 ? void 0 : _uiState$mapControls3.active);
    var spaceForLegendWidth = isLegendPinned ? ((_theme$mapControl = theme.mapControl) === null || _theme$mapControl === void 0 ? void 0 : _theme$mapControl.width) + ((_theme$mapControl2 = theme.mapControl) === null || _theme$mapControl2 === void 0 ? void 0 : (_theme$mapControl2$ma = _theme$mapControl2.mapLegend) === null || _theme$mapControl2$ma === void 0 ? void 0 : (_theme$mapControl2$ma2 = _theme$mapControl2$ma.pinned) === null || _theme$mapControl2$ma2 === void 0 ? void 0 : _theme$mapControl2$ma2.right) * 2 - theme.bottomWidgetPaddingRight : 0;
    var enlargedFilterWidth = (isOpen && !isMobile ? containerW - sidePanelWidth : containerW) - spaceForLegendWidth; // show playback control if layers contain trip layer & at least one trip layer is visible

    var animatableLayer = (0, _react.useMemo)(function () {
      return layers.filter(function (l) {
        return l.config.animation && l.config.animation.enabled && l.config.isVisible;
      });
    }, [layers]);
    var readyToAnimation = Array.isArray(animationConfig.domain) && Number.isFinite(animationConfig.currentTime); // if animation control is showing, hide time display in time slider

    var showFloatingTimeDisplay = !animatableLayer.length;
    var showAnimationControl = animatableLayer.length && readyToAnimation && !animationConfig.hideControl;
    var showTimeWidget = enlargedFilterIdx > -1 && Object.keys(datasets).length > 0; // if filter is not animating, pass in enlarged filter here because
    // animation controller needs to call reset on it

    var filter = animatedFilter || filters[enlargedFilterIdx];
    var onClose = (0, _react.useCallback)(function () {
      return visStateActions.setFilterView(enlargedFilterIdx, _constants.FILTER_VIEW_TYPES.side);
    }, [visStateActions, enlargedFilterIdx]);
    return /*#__PURE__*/_react["default"].createElement(BottomWidgetContainer, {
      width: Math.min(maxWidth, enlargedFilterWidth),
      style: {
        marginRight: spaceForLegendWidth
      },
      className: "bottom-widget--container",
      hasPadding: showAnimationControl || showTimeWidget,
      ref: rootRef
    }, /*#__PURE__*/_react["default"].createElement(LayerAnimationController, {
      animationConfig: animationConfig,
      setLayerAnimationTime: visStateActions.setLayerAnimationTime
    }, function (isAnimating, start, pause, resetAnimation, timeline, setTimelineValue) {
      return showAnimationControl ? /*#__PURE__*/_react["default"].createElement(LayerAnimationControl, {
        updateAnimationSpeed: visStateActions.updateLayerAnimationSpeed,
        toggleAnimation: visStateActions.toggleLayerAnimation,
        isAnimatable: !animatedFilter,
        isAnimating: isAnimating,
        resetAnimation: resetAnimation,
        setTimelineValue: setTimelineValue,
        timeline: timeline
      }) : null;
    }), filter ? /*#__PURE__*/_react["default"].createElement(FilterAnimationController, {
      filter: filter,
      filterIdx: animatedFilterIdx > -1 ? animatedFilterIdx : enlargedFilterIdx,
      setFilterAnimationTime: visStateActions.setFilterAnimationTime
    }, function (isAnimating, start, pause, resetAnimation, timeline, setTimelineValue) {
      return showTimeWidget ? /*#__PURE__*/_react["default"].createElement(TimeWidget // TimeWidget uses React.memo, here we pass width
      // even though it doesnt use it, to force rerender
      , {
        filter: filters[enlargedFilterIdx],
        index: enlargedFilterIdx,
        datasets: datasets,
        readOnly: readOnly,
        showTimeDisplay: showFloatingTimeDisplay,
        setFilterPlot: visStateActions.setFilterPlot,
        setFilterAnimationTime: setTimelineValue,
        setFilterAnimationWindow: visStateActions.setFilterAnimationWindow,
        toggleAnimation: visStateActions.toggleFilterAnimation,
        updateAnimationSpeed: visStateActions.updateFilterAnimationSpeed,
        resetAnimation: resetAnimation,
        isAnimatable: !animationConfig || !animationConfig.isAnimating,
        onClose: onClose,
        timeline: timeline
      }) : null;
    }) : null);
  };
  /* eslint-disable react/display-name */


  return (0, _styledComponents.withTheme)(
  /*#__PURE__*/
  // @ts-ignore
  (0, _react.forwardRef)(function (props, ref) {
    return /*#__PURE__*/_react["default"].createElement(BottomWidget, (0, _extends2["default"])({}, props, {
      rootRef: ref
    }));
  }));
  /* eslint-enable react/display-name */
}
/* eslint-enable complexity */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,