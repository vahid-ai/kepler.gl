"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLayerOrderOnSort = exports.findDndContainerId = exports.DRAGOVERLAY_MODIFIERS = exports.DND_EMPTY_MODIFIERS = exports.DND_MODIFIERS = exports.DragItem = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _modifiers = require("@dnd-kit/modifiers");

var _sortable = require("@dnd-kit/sortable");

var _templateObject;

var DragItem = _styledComponents["default"].div(_templateObject || (_templateObject = (0, _taggedTemplateLiteral2["default"])(["\n  color: ", ";\n  border-radius: ", "px;\n  padding: 5px 10px;\n  display: inline;\n"])), function (props) {
  return props.theme.textColorHl;
}, function (props) {
  return props.theme.radioButtonRadius;
});

exports.DragItem = DragItem;
var DND_MODIFIERS = [_modifiers.restrictToVerticalAxis, _modifiers.restrictToParentElement];
exports.DND_MODIFIERS = DND_MODIFIERS;
var DND_EMPTY_MODIFIERS = [];
exports.DND_EMPTY_MODIFIERS = DND_EMPTY_MODIFIERS;
var DRAGOVERLAY_MODIFIERS = [_modifiers.restrictToWindowEdges];
exports.DRAGOVERLAY_MODIFIERS = DRAGOVERLAY_MODIFIERS;

var findDndContainerId = function findDndContainerId(id, items) {
  return id in items ? id : Object.keys(items).find(function (key) {
    return items[key].includes(id);
  });
};

exports.findDndContainerId = findDndContainerId;

var getLayerOrderOnSort = function getLayerOrderOnSort(layerOrder, dndItems, activeLayerId, overLayerId) {
  var activeIndex = dndItems.indexOf(activeLayerId);
  var overIndex = dndItems.indexOf(overLayerId);
  return activeIndex === overIndex ? layerOrder : (0, _sortable.arrayMove)(layerOrder, activeIndex, overIndex);
};

exports.getLayerOrderOnSort = getLayerOrderOnSort;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21wb25lbnRzL3NyYy9kbmQtbGF5ZXItaXRlbXMudHMiXSwibmFtZXMiOlsiRHJhZ0l0ZW0iLCJzdHlsZWQiLCJkaXYiLCJwcm9wcyIsInRoZW1lIiwidGV4dENvbG9ySGwiLCJyYWRpb0J1dHRvblJhZGl1cyIsIkRORF9NT0RJRklFUlMiLCJyZXN0cmljdFRvVmVydGljYWxBeGlzIiwicmVzdHJpY3RUb1BhcmVudEVsZW1lbnQiLCJETkRfRU1QVFlfTU9ESUZJRVJTIiwiRFJBR09WRVJMQVlfTU9ESUZJRVJTIiwicmVzdHJpY3RUb1dpbmRvd0VkZ2VzIiwiZmluZERuZENvbnRhaW5lcklkIiwiaWQiLCJpdGVtcyIsIk9iamVjdCIsImtleXMiLCJmaW5kIiwia2V5IiwiaW5jbHVkZXMiLCJnZXRMYXllck9yZGVyT25Tb3J0IiwibGF5ZXJPcmRlciIsImRuZEl0ZW1zIiwiYWN0aXZlTGF5ZXJJZCIsIm92ZXJMYXllcklkIiwiYWN0aXZlSW5kZXgiLCJpbmRleE9mIiwib3ZlckluZGV4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUtBOzs7O0FBRU8sSUFBTUEsUUFBUSxHQUFHQyw2QkFBT0MsR0FBViw2S0FDVixVQUFBQyxLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDQyxLQUFOLENBQVlDLFdBQWhCO0FBQUEsQ0FESyxFQUVGLFVBQUFGLEtBQUs7QUFBQSxTQUFJQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUUsaUJBQWhCO0FBQUEsQ0FGSCxDQUFkOzs7QUFPQSxJQUFNQyxhQUFhLEdBQUcsQ0FBQ0MsaUNBQUQsRUFBeUJDLGtDQUF6QixDQUF0Qjs7QUFDQSxJQUFNQyxtQkFBbUIsR0FBRyxFQUE1Qjs7QUFDQSxJQUFNQyxxQkFBcUIsR0FBRyxDQUFDQyxnQ0FBRCxDQUE5Qjs7O0FBQ0EsSUFBTUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUFDQyxFQUFELEVBQUtDLEtBQUw7QUFBQSxTQUNoQ0QsRUFBRSxJQUFJQyxLQUFOLEdBQWNELEVBQWQsR0FBbUJFLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixLQUFaLEVBQW1CRyxJQUFuQixDQUF3QixVQUFBQyxHQUFHO0FBQUEsV0FBSUosS0FBSyxDQUFDSSxHQUFELENBQUwsQ0FBV0MsUUFBWCxDQUFvQk4sRUFBcEIsQ0FBSjtBQUFBLEdBQTNCLENBRGE7QUFBQSxDQUEzQjs7OztBQUVBLElBQU1PLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsQ0FBQ0MsVUFBRCxFQUFhQyxRQUFiLEVBQXVCQyxhQUF2QixFQUFzQ0MsV0FBdEMsRUFBc0Q7QUFDdkYsTUFBTUMsV0FBVyxHQUFHSCxRQUFRLENBQUNJLE9BQVQsQ0FBaUJILGFBQWpCLENBQXBCO0FBQ0EsTUFBTUksU0FBUyxHQUFHTCxRQUFRLENBQUNJLE9BQVQsQ0FBaUJGLFdBQWpCLENBQWxCO0FBRUEsU0FBT0MsV0FBVyxLQUFLRSxTQUFoQixHQUE0Qk4sVUFBNUIsR0FBeUMseUJBQVVBLFVBQVYsRUFBc0JJLFdBQXRCLEVBQW1DRSxTQUFuQyxDQUFoRDtBQUNELENBTE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7XG4gIHJlc3RyaWN0VG9WZXJ0aWNhbEF4aXMsXG4gIHJlc3RyaWN0VG9XaW5kb3dFZGdlcyxcbiAgcmVzdHJpY3RUb1BhcmVudEVsZW1lbnRcbn0gZnJvbSAnQGRuZC1raXQvbW9kaWZpZXJzJztcbmltcG9ydCB7YXJyYXlNb3ZlfSBmcm9tICdAZG5kLWtpdC9zb3J0YWJsZSc7XG5cbmV4cG9ydCBjb25zdCBEcmFnSXRlbSA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLnRleHRDb2xvckhsfTtcbiAgYm9yZGVyLXJhZGl1czogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5yYWRpb0J1dHRvblJhZGl1c31weDtcbiAgcGFkZGluZzogNXB4IDEwcHg7XG4gIGRpc3BsYXk6IGlubGluZTtcbmA7XG5cbmV4cG9ydCBjb25zdCBETkRfTU9ESUZJRVJTID0gW3Jlc3RyaWN0VG9WZXJ0aWNhbEF4aXMsIHJlc3RyaWN0VG9QYXJlbnRFbGVtZW50XTtcbmV4cG9ydCBjb25zdCBETkRfRU1QVFlfTU9ESUZJRVJTID0gW107XG5leHBvcnQgY29uc3QgRFJBR09WRVJMQVlfTU9ESUZJRVJTID0gW3Jlc3RyaWN0VG9XaW5kb3dFZGdlc107XG5leHBvcnQgY29uc3QgZmluZERuZENvbnRhaW5lcklkID0gKGlkLCBpdGVtcykgPT5cbiAgaWQgaW4gaXRlbXMgPyBpZCA6IE9iamVjdC5rZXlzKGl0ZW1zKS5maW5kKGtleSA9PiBpdGVtc1trZXldLmluY2x1ZGVzKGlkKSk7XG5leHBvcnQgY29uc3QgZ2V0TGF5ZXJPcmRlck9uU29ydCA9IChsYXllck9yZGVyLCBkbmRJdGVtcywgYWN0aXZlTGF5ZXJJZCwgb3ZlckxheWVySWQpID0+IHtcbiAgY29uc3QgYWN0aXZlSW5kZXggPSBkbmRJdGVtcy5pbmRleE9mKGFjdGl2ZUxheWVySWQpO1xuICBjb25zdCBvdmVySW5kZXggPSBkbmRJdGVtcy5pbmRleE9mKG92ZXJMYXllcklkKTtcblxuICByZXR1cm4gYWN0aXZlSW5kZXggPT09IG92ZXJJbmRleCA/IGxheWVyT3JkZXIgOiBhcnJheU1vdmUobGF5ZXJPcmRlciwgYWN0aXZlSW5kZXgsIG92ZXJJbmRleCk7XG59O1xuIl19