"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = require("../../common/styled-components");

var _filterPanelHeader = _interopRequireDefault(require("../../side-panel/filter-panel/filter-panel-header"));

var _panelHeaderAction = _interopRequireDefault(require("../../side-panel/panel-header-action"));

var _sourceDataSelector = _interopRequireDefault(require("../../side-panel/common/source-data-selector"));

var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));

var _newFilterPanel = require("./new-filter-panel");

// Copyright (c) 2023 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
FieldPanelWithFieldSelectFactory.deps = [_filterPanelHeader["default"], _sourceDataSelector["default"], _fieldSelector["default"], _panelHeaderAction["default"]];

function FieldPanelWithFieldSelectFactory(FilterPanelHeader, SourceDataSelector, FieldSelector, PanelHeaderAction) {
  var FilterPanelWithFieldSelect = /*#__PURE__*/_react["default"].memo(function (_ref) {
    var children = _ref.children,
        allAvailableFields = _ref.allAvailableFields,
        datasets = _ref.datasets,
        filter = _ref.filter,
        idx = _ref.idx,
        removeFilter = _ref.removeFilter,
        setFilter = _ref.setFilter,
        _ref$panelActions = _ref.panelActions,
        panelActions = _ref$panelActions === void 0 ? [] : _ref$panelActions;
    var onFieldSelector = (0, _react.useCallback)(function (field) {
      return setFilter(idx, 'name', field.name);
    }, [idx, setFilter]);
    var onSourceDataSelector = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'dataId', [value]);
    }, [idx, setFilter]);
    var fieldValue = (0, _react.useMemo)(function () {
      return Array.isArray(filter.name) ? filter.name[0] : filter.name;
    }, [filter.name]);
    var dataset = datasets[filter.dataId[0]];
    var supportedFields = (0, _react.useMemo)(function () {
      return (0, _newFilterPanel.getSupportedFilterFields)(dataset.supportedFilterTypes, allAvailableFields);
    }, [dataset.supportedFilterTypes, allAvailableFields]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(FilterPanelHeader, {
      datasets: [dataset],
      filter: filter,
      removeFilter: removeFilter
    }, /*#__PURE__*/_react["default"].createElement(FieldSelector, {
      inputTheme: "secondary",
      fields: supportedFields,
      value: fieldValue,
      erasable: false,
      onSelect: onFieldSelector
    }), panelActions.map(function (panelAction) {
      return /*#__PURE__*/_react["default"].createElement(PanelHeaderAction, {
        id: panelAction.id,
        key: panelAction.id,
        onClick: panelAction.onClick,
        tooltip: panelAction.tooltip,
        IconComponent: panelAction.iconComponent,
        active: panelAction.active
      });
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents.StyledFilterContent, {
      className: "filter-panel__content"
    }, Object.keys(datasets).length > 1 && /*#__PURE__*/_react["default"].createElement(SourceDataSelector, {
      inputTheme: "secondary",
      datasets: datasets,
      disabled: filter.freeze,
      dataId: filter.dataId,
      onSelect: onSourceDataSelector
    }), children));
  });

  FilterPanelWithFieldSelect.displayName = 'FilterPanelWithFieldSelect';
  return FilterPanelWithFieldSelect;
}

var _default = FieldPanelWithFieldSelectFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,